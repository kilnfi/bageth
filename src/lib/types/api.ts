/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/v1/eth/stakes": {
    /**
     * Stakes
     * @description Get the status of Ethereum stakes
     */
    get: operations["getEthStakes"];
    /**
     * Create stakes
     * @description Link ETH stakes to a Kiln account
     */
    post: operations["postEthStakes"];
  };
  "/v1/eth/rewards": {
    /**
     * Rewards
     * @description Get historical rewards by day of Ethereum stakes
     */
    get: operations["getEthRewards"];
  };
  "/v1/eth/operations": {
    /**
     * Operations
     * @description Get the operations of Ethereum stakes
     */
    get: operations["getEthOperations"];
  };
  "/v1/eth/network-stats": {
    /**
     * Network Stats
     * @description Get some network statistics on Ethereum staking
     */
    get: operations["getEthNetworkStats"];
  };
  "/v1/eth/kiln-stats": {
    /**
     * Kiln Stats
     * @description Get some Kiln statistics on Ethereum staking
     */
    get: operations["getEthKilnStats"];
  };
  "/v1/eth/keys": {
    /**
     * Validation Keys
     * @description Create Ethereum validation keys on Kiln's infrastructure.
     */
    post: operations["postEthKeys"];
  };
  "/v1/eth/transaction/stake": {
    /**
     * Stake Transaction
     * @description Generates an Ethereum EIP 1559 stake transaction
     */
    post: operations["postEthStakeTx"];
  };
  "/v1/eth/transaction/prepare": {
    /**
     * Prepare Transaction
     * @description Prepare an Ethereum transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
     */
    post: operations["postEthPrepareTx"];
  };
  "/v1/eth/transaction/broadcast": {
    /**
     * Broadcast Transaction
     * @description Broadcasts a signed Ethereum transaction
     */
    post: operations["postEthBroadcastTx"];
  };
  "/v1/eth/transaction/status": {
    /**
     * Transaction Status
     * @description Get the status of an Ethereum transaction
     */
    get: operations["getEthTxStatus"];
  };
  "/v1/eth/reports": {
    /**
     * Excel Reports
     * @description Generates an Excel report sheet for your stakes and rewards
     */
    get: operations["getEthReports"];
  };
  "/v1/eth/exit-messages": {
    /**
     * Exit Messages
     * @description Get encrypted exit message for a validator
     */
    get: operations["getExitMessage"];
  };
  "/v1/xtz/stakes": {
    /**
     * Stakes
     * @description Get the status of Tezos stakes
     */
    get: operations["getXtzStakes"];
  };
  "/v1/xtz/rewards": {
    /**
     * Rewards
     * @description Get historical rewards of Tezos stakes
     */
    get: operations["getXtzRewards"];
  };
  "/v1/xtz/operations": {
    /**
     * Operations
     * @description Get historical operations of Tezos stakes
     */
    get: operations["getXtzOperations"];
  };
  "/v1/xtz/network-stats": {
    /**
     * Network Stats
     * @description Get some network statistics on Tezos staking
     */
    get: operations["getXtzNetworkStats"];
  };
  "/v1/xtz/reports": {
    /**
     * Excel Reports
     * @description Generates an Excel report sheet for your stakes and rewards
     */
    get: operations["getXtzReports"];
  };
  "/v1/xtz/transaction/stake": {
    /**
     * Stake Transaction
     * @description Generates a delegation transaction on Tezos
     */
    post: operations["postXtzStakeTx"];
  };
  "/v1/xtz/transaction/unstake": {
    /**
     * Unstake Transaction
     * @description Generates an undelegate transaction on Tezos
     */
    post: operations["postXtzUnStakeTx"];
  };
  "/v1/xtz/transaction/prepare": {
    /**
     * Prepare Transaction
     * @description Prepare a Tezos transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
     */
    post: operations["postXtzPrepareTx"];
  };
  "/v1/xtz/transaction/broadcast": {
    /**
     * Broadcast Transaction
     * @description Broadcasts a signed Tezos transaction
     */
    post: operations["postXtzBroadcastTx"];
  };
  "/v1/xtz/transaction/status": {
    /**
     * Transaction Status
     * @description Get the status of a Tezos transaction
     */
    get: operations["getXtzTxStatus"];
  };
  "/v1/sol/stakes": {
    /**
     * Stakes
     * @description Get the status of Solana stakes
     */
    get: operations["getSolStakes"];
    /**
     * Create stakes
     * @description Create Solana stakes and linked them to a Kiln account
     */
    post: operations["postSolStakes"];
  };
  "/v1/sol/rewards": {
    /**
     * Rewards
     * @description Get historical rewards of Solana stakes
     */
    get: operations["getSolRewards"];
  };
  "/v1/sol/operations": {
    /**
     * Operations
     * @description Get the operations of Solana stakes
     */
    get: operations["getSolOperations"];
  };
  "/v1/sol/network-stats": {
    /**
     * Network Stats
     * @description Get some network statistics on Solana staking
     */
    get: operations["getSolNetworkStats"];
  };
  "/v1/sol/reports": {
    /**
     * Reports
     * @description Get reports on Solana staking
     */
    get: operations["getSolReports"];
  };
  "/v1/sol/transaction/stake": {
    /**
     * Stake Transaction
     * @description Craft a stake transaction. This results in a new stake account created with the amount given.
     */
    post: operations["postSolStakeTx"];
  };
  "/v1/sol/transaction/deactivate-stake": {
    /**
     * Deactivate Stake Transaction
     * @description Craft a deactivate stake account transaction.
     */
    post: operations["postSolDeactivateStakeTx"];
  };
  "/v1/sol/transaction/withdraw-stake": {
    /**
     * Withdraw Stake Transaction
     * @description Craft a withdraw stake transaction.
     */
    post: operations["postSolWithdrawStakeTx"];
  };
  "/v1/sol/transaction/merge-stakes": {
    /**
     * Merge Stakes Transaction
     * @description Craft a merge stakes transaction.
     */
    post: operations["postSolMergeStakesTx"];
  };
  "/v1/sol/transaction/split-stake": {
    /**
     * Split Stake Transaction
     * @description Craft a solana split stake transaction
     */
    post: operations["postSolSplitStakeTx"];
  };
  "/v1/sol/transaction/prepare": {
    /**
     * Prepare Transaction
     * @description Prepare an unsigned transaction for broadcast by adding signatures to it
     */
    post: operations["postSolPrepareTx"];
  };
  "/v1/sol/transaction/broadcast": {
    /**
     * Broadcast Transaction
     * @description Broadcast a serialized signed transaction to the blockchain
     */
    post: operations["postSolBroadcastTx"];
  };
  "/v1/sol/transaction/status": {
    /**
     * Transaction Status
     * @description Get the status of a transaction
     */
    get: operations["getSolTxStatus"];
  };
  "/v1/atom/stakes": {
    /**
     * Stakes
     * @description Get the status of ATOM stakes. Units are in uATOM (10⁻⁶ ATOM). Only stakes active after [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary) are available.
     */
    get: operations["getAtomStakes"];
    /**
     * Create stakes
     * @description Link an ATOM stake to a Kiln account
     */
    post: operations["postAtomStakes"];
  };
  "/v1/atom/rewards": {
    /**
     * Rewards
     * @description Get historical rewards by day of ATOM stakes. Units are in uATOM (10⁻⁶ ATOM). Only daily breakdowns starting 13/04/2022 ([Theta v7](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary)) are available.
     */
    get: operations["getAtomRewards"];
  };
  "/v1/atom/network-stats": {
    /**
     * Network Stats
     * @description Get some network statistics on Cosmos
     */
    get: operations["getAtomNetworkStats"];
  };
  "/v1/atom/reports": {
    /**
     * Reports
     * @description Get reports on Cosmos staking
     */
    get: operations["getAtomReports"];
  };
  "/v1/atom/transaction/stake": {
    /**
     * Stake Transaction
     * @description Generates a delegate transaction on Cosmos
     */
    post: operations["postAtomStakeTx"];
  };
  "/v1/atom/transaction/withdraw-rewards": {
    /**
     * Withdraw Rewards Transaction
     * @description Generates a withdraw rewards transaction on Cosmos
     */
    post: operations["postAtomWithdrawRewardsTx"];
  };
  "/v1/atom/transaction/unstake": {
    /**
     * Unstake Transaction
     * @description Generates an undelegate transaction on Cosmos
     */
    post: operations["postAtomUnstakeTx"];
  };
  "/v1/atom/transaction/prepare": {
    /**
     * Prepare Transaction
     * @description Prepare an unsigned transaction for broadcast by adding signatures to it
     */
    post: operations["postAtomPrepareTx"];
  };
  "/v1/atom/transaction/broadcast": {
    /**
     * Broadcast Transaction
     * @description Broadcast a signed transaction to the Cosmos network
     */
    post: operations["postAtomBroadcastTx"];
  };
  "/v1/atom/transaction/status": {
    /**
     * Transaction Status
     * @description Get the status of a transaction
     */
    get: operations["getAtomTxStatus"];
  };
  "/v1/accounts": {
    /**
     * Accounts
     * @description Retrieve accounts in your organization
     */
    get: operations["getAccounts"];
    /**
     * Accounts
     * @description Create a new account in your organization
     */
    post: operations["postAccount"];
  };
  "/v1/accounts/{id}": {
    /**
     * Account
     * @description Retrieve an account in your organization
     */
    get: operations["getAccount"];
    /**
     * Account
     * @description Update an account in your organization
     */
    put: operations["putAccount"];
    /**
     * Account
     * @description Delete an account in your organization
     */
    delete: operations["deleteAccount"];
  };
  "/v1/accounts/{id}/portfolio": {
    /**
     * Account Portfolio
     * @description Retrieve an account asset portfolio. USD balances are calculated based on recent asset prices. We use CoinGecko API to retrieve asset prices.
     */
    get: operations["getAccountPortfolio"];
  };
  "/v1/organizations/{id}/portfolio": {
    /**
     * Organization Portfolio
     * @description Retrieve an organization asset portfolio. USD balances are calculated based on recent asset prices. We use CoinGecko API to retrieve asset prices.
     */
    get: operations["getOrganizationPortfolio"];
  };
  "/v1/ada/reports": {
    /**
     * Reports
     * @description Get reports on Cardano staking
     */
    get: operations["getAdaReports"];
  };
  "/v1/ada/transaction/stake": {
    /**
     * Stake Transaction
     * @description Generates a delegate transaction on Cardano
     */
    post: operations["postAdaStakeTx"];
  };
  "/v1/ada/transaction/withdraw-rewards": {
    /**
     * Withdraw Rewards Transaction
     * @description Generates a withdraw rewards transaction on Cardano
     */
    post: operations["postAdaWithdrawRewardsTx"];
  };
  "/v1/ada/transaction/unstake": {
    /**
     * Unstake Transaction
     * @description Generates an undelegate transaction on Cardano
     */
    post: operations["postAdaUnstakeTx"];
  };
  "/v1/ada/transaction/prepare": {
    /**
     * Prepare Transaction
     * @description Prepare an unsigned transaction for broadcast by adding signatures to it
     */
    post: operations["postAdaPrepareTx"];
  };
  "/v1/ada/transaction/broadcast": {
    /**
     * Broadcast Transaction
     * @description Broadcast a signed transaction to the Cardano network
     */
    post: operations["postAdaBroadcastTx"];
  };
  "/v1/ada/transaction/status": {
    /**
     * Transaction Status
     * @description Get the status of a transaction
     */
    get: operations["getAdaTxStatus"];
  };
  "/v1/matic/transaction/approve": {
    /**
     * Approve Transaction
     * @description Generates an approve transaction to allow a smart contract to spend MATIC tokens on behalf of the user
     */
    post: operations["postMaticApproveTx"];
  };
  "/v1/matic/transaction/buy-voucher": {
    /**
     * Buy Voucher Transaction
     * @description Generates a buy voucher transaction to buy shares from a validator
     */
    post: operations["postMaticBuyVoucherTx"];
  };
  "/v1/matic/transaction/sell-voucher": {
    /**
     * Sell Voucher Transaction
     * @description Generates a sell voucher transaction to sell shares from a validator. Your token then enter a 3/4 days (80 checkpoints) unbonding period.
     */
    post: operations["postMaticSellVoucherTx"];
  };
  "/v1/matic/transaction/unstake-claim-tokens": {
    /**
     * Unstake Claim Tokens Transaction
     * @description Generates an unstakeClaimTokens transaction to withdraw unbonded tokens back to your wallet
     */
    post: operations["postMaticUnstakeClaimTokensTx"];
  };
  "/v1/matic/transaction/withdraw-rewards": {
    /**
     * Withdraw Rewards Transaction
     * @description Generates a withdraw rewards transaction to withdraw available rewards to your wallet
     */
    post: operations["postMaticWithdrawRewardsTx"];
  };
  "/v1/matic/transaction/restake-rewards": {
    /**
     * Restake Rewards Transaction
     * @description Generates a restake rewards transaction to restake available rewards to the given validator
     */
    post: operations["postMaticRestakeRewardsTx"];
  };
  "/v1/matic/transaction/prepare": {
    /**
     * Prepare Transaction
     * @description Prepare a transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
     */
    post: operations["postMaticPrepareTx"];
  };
  "/v1/matic/transaction/broadcast": {
    /**
     * Broadcast Transaction
     * @description Broadcasts a signed transaction to the Ethereum network
     */
    post: operations["postMaticBroadcastTx"];
  };
  "/v1/matic/transaction/status": {
    /**
     * Transaction Status
     * @description Get the status of a transaction on the Ethereum network
     */
    get: operations["getMaticTxStatus"];
  };
  "/v1/near/stakes": {
    /**
     * Stakes
     * @description Get the status of NEAR stakes
     */
    get: operations["getNearStakes"];
    /**
     * Create stakes
     * @description Create NEAR stakes and linked them to a Kiln account
     */
    post: operations["postNEARStakes"];
  };
  "/v1/near/rewards": {
    /**
     * Rewards
     * @description Get historical rewards of NEAR stakes
     */
    get: operations["getNearRewards"];
  };
  "/v1/near/reports": {
    /**
     * Reports
     * @description Get reports on NEAR staking
     */
    get: operations["getNEARReports"];
  };
  "/v1/near/network-stats": {
    /**
     * Network Stats
     * @description Get stats on NEAR network
     */
    get: operations["getNEARNetworkStats"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @description Pagination information. This feature is enabled when `current_page` is specified */
    Pagination: {
      /**
       * @description Current number of the page
       * @example 2
       */
      current_page?: number;
      /**
       * @description Number of the next page if there is one
       * @example 3
       */
      next_page?: number;
      /**
       * @description Number of the previous page if there is one
       * @example 1
       */
      previous_page?: number;
      /**
       * @description Number of entries per page. Can be overriden with the `page_size` parameter
       * @default 25
       * @example 25
       */
      page_size?: number;
      /**
       * @description Total number of pages
       * @example 17
       */
      total_pages?: number;
      /**
       * @description Total number of entries
       * @example 423
       */
      total_entries?: number;
    };
    ETHOperationDeposit: {
      /**
       * @description type of the operation
       * @example deposit
       */
      type?: "deposit";
      /**
       * Format: date-time
       * @description Time of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Validator address of the operation
       * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
       */
      validator_address?: string;
      /**
       * @description Index of the public key of the validator
       * @example 1
       */
      validator_index?: number;
      /**
       * @description Hash of the transaction
       * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
       */
      tx_hash?: string;
      /**
       * @description Address of the sender of the transaction
       * @example 0x41bf25fc8c52d292bd66d3bcecd8a919ecb9ef88
       */
      tx_sender?: string;
      /**
       * @description Gas used by the transaction in WEI
       * @example 2700999916653262
       */
      tx_gas_used?: string;
      /**
       * @description Effective gas price used for this TX in WEI
       * @example 1499997889
       */
      tx_effective_gas_price?: string;
      /**
       * @description Ordered list of smart-contracts in the calling chain
       * @example [
       *   "0x1e68238cE926DEC62b3FBC99AB06eB1D85CE0270",
       *   "0x43244f90814b31dec250de24df5bb023eB1D85CE"
       * ]
       */
      proxies?: string[];
      /**
       * @description Block number containing the transaction
       * @example 15955054
       */
      block?: number;
      /**
       * @description Base fee used for this block in WEI
       * @example 7
       */
      block_base_fee?: string;
      /**
       * @description Withdrawal credentials of the deposit
       * @example 010000000000000000000000e1f4acc0affb36a805474e3b6ab786738c6900a2
       */
      withdrawal_credentials?: string;
      /**
       * @description Amount in WEI of the deposit transaction
       * @example 32000000000000000000000
       */
      amount?: string;
    };
    ETHOperationExecutionReward: {
      /** @example execution_reward */
      type?: "execution_reward";
      /**
       * Format: date-time
       * @description Time of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Validator address of the operation
       * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
       */
      validator_address?: string;
      /**
       * @description Validator's consensus layer index
       * @example 1
       */
      validator_index?: number;
      /**
       * @description Block number of the reward
       * @example 15955054
       */
      block?: number;
      /**
       * @description Fee recipient of the reward
       * @example 0x1e68238cE926DEC62b3FBC99AB06eB1D85CE0270
       */
      fee_recipient?: string;
      /**
       * @description Hash of the MEV payout transaction if appliable
       * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
       */
      mev_payout_tx_hash?: string | null;
      /**
       * @description Amount in WEI of the reward
       * @example 3467036438000000000
       */
      amount?: string;
    };
    ETHOperationConsensusWithdrawal: {
      /** @example consensus_withdrawal */
      type?: "consensus_withdrawal";
      /**
       * Format: date-time
       * @description Time of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Validator address of the operation
       * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
       */
      validator_address?: string;
      /**
       * @description Validator's consensus layer index
       * @example 1
       */
      validator_index?: number;
      /**
       * @description Block number of the reward
       * @example 15955054
       */
      block?: number;
      /**
       * @description Fee recipient of the reward
       * @example 0x1e68238cE926DEC62b3FBC99AB06eB1D85CE0270
       */
      fee_recipient?: string;
      /**
       * @description Amount in WEI of the reward
       * @example 3467036438000000000
       */
      amount?: string;
    };
    ETHStake: {
      /**
       * @description Public key of the validator
       * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
       */
      validator_address?: string;
      /**
       * @description Validator's consensus layer index
       * @example 1
       */
      validator_index?: number;
      /**
       * @description State of the Ethereum stake
       * @example active_ongoing
       */
      state?: string;
      /**
       * Format: date-time
       * @description Date of activation on the Ethereum consensus layer
       * @example 2023-01-14T01:13:59Z
       */
      activated_at?: string | null;
      /**
       * @description Epoch of activation on the Ethereum consensus layer
       * @example 174049
       */
      activated_epoch?: number | null;
      /**
       * Format: date-time
       * @description Timestamp of the block at which the corresponding staking transaction was executed
       * @example 2023-01-14T01:13:59Z
       */
      delegated_at?: string | null;
      /**
       * @description Block at which the corresponding staking transaction was executed
       * @example 16397387
       */
      delegated_block?: number | null;
      /**
       * @description Address of the sender of the first deposit transaction
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      deposit_tx_sender?: string | null;
      /**
       * @description Address of the last recipient of an execution reward
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      execution_fee_recipient?: string | null;
      /**
       * @description Ethereum withdrawal credentials
       * @example 010000000000000000000000e1f4acc0affb36a805474e3b6ab786738c6900a2
       */
      withdrawal_credentials?: string | null;
      /**
       * @description Effective balance in WEI of the stake as seen by the Ethereum consensus layer
       * @example 32000000000000000000
       */
      effective_balance?: string | null;
      /**
       * @description Current balance in WEI on the Ethereum consensus layer
       * @example 32076187808000000000
       */
      balance?: string | null;
      /**
       * @description Sum of consensus rewards in WEI earned by this stake
       * @example 76187808000000000
       */
      consensus_rewards?: string | null;
      /**
       * @description Sum of execution rewards in WEI earned by this stake
       * @example 0
       */
      execution_rewards?: string | null;
      /**
       * @description Sum of consensus and execution rewards in WEI earned by this stake
       * @example 76187808000000000
       */
      rewards?: string | null;
      /**
       * @description Gross annual percentage yield
       * @example 3.407
       */
      gross_apy?: number | null;
      /**
       * @description Whether this stake is managed by Kiln
       * @example true
       */
      is_kiln?: boolean | null;
      /**
       * Format: date-time
       * @description Last date this data was updated
       * @example 2023-01-14T01:13:59Z
       */
      updated_at?: string | null;
    };
    PostETHStakesPayload: {
      stakes: {
          /**
           * @description Validator pubkey
           * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
           */
          validator?: string;
        }[];
      /**
       * @description Kiln Account ID
       * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
       */
      account_id: string;
    };
    ETHReward: {
      /**
       * Format: date
       * @description Day for this reward entry
       * @example 2023-01-15
       */
      date?: string;
      /**
       * @description Accumulated consensus rewards WEI during the day
       * @example 2988504000000000
       */
      consensus_rewards?: string;
      /**
       * @description Accumulated execution rewards in WEI during the day
       * @example 0
       */
      execution_rewards?: string;
      /**
       * @description Accumulated consensus and execution rewards in WEI during the day
       * @example 2988504000000000
       */
      rewards?: string;
      /**
       * @description Sum of effective balances in WEI that contributed to these rewards
       * @example 64000000000000000000
       */
      stake_balance?: string;
      /**
       * @description Gross annual percentage yield
       * @example 3.407
       */
      gross_apy?: number;
      /**
       * @description Consensus annual percentage yield
       * @example 3.407
       */
      cl_apy?: number;
      /**
       * @description Execution annual percentage yield
       * @example 0
       */
      el_apy?: number;
    };
    ETHNetworkStats: {
      /**
       * @description Gross annual percentage yield
       * @example 4.5
       */
      network_gross_apy?: number;
      /**
       * @description Supply of Ethereum currently staked
       * @example 12.4
       */
      supply_staked_percent?: number;
      /**
       * @description Price of Ethereum in USD
       * @example 2000
       */
      eth_price_usd?: number;
      /**
       * @description Estimated queue entry time in seconds from a deposit to an active stake
       * @example 3600
       */
      estimated_entry_time_seconds?: number;
      /**
       * @description Estimated queue exit time in seconds from an exit request to an exited stake
       * @example 3600
       */
      estimated_exit_time_seconds?: number;
      /**
       * @description Estimated time for a stake to receive Consensus rewards on the execution layer
       * @example 3600
       */
      estimated_withdrawal_time_seconds?: number;
    };
    ETHKilnStats: {
      gross_apy?: {
        /** @description Kiln's average APR from yesterday */
        last_1d?: number;
        /** @description Kiln's average APR from the last 7 days */
        last_7d?: number;
        /** @description Kiln's average APR from the last 30 days */
        last_30d?: number;
      };
    };
    ETHExitMessage: {
      /**
       * @description Public key of the validator
       * @example 0x95373bcf8e2c64e1c373a6e534c002f210adbcc84c5abda3b6306677e171430ae50781a51c9f579a47622e334dba2412
       */
      validator_address?: string;
      /**
       * @description GnuPG UID of the public key used to encrypt payload
       * @example Hubert Bonisseur de La Bath (hubert) <hubert@kiln.fi>
       */
      gpg_public_key?: string;
      /**
       * @description GnuPG encrypted consensus message to exit the validator
       * @example -----BEGIN PGP MESSAGE-----
       *
       * hQEMAw2MqHavoVh9AQf/f5paxAuOB25SlXqKmLea0yHJBXnwuMuByfDZbXOBe4mD
       * iXz4ZJakeKGLbeJ/pP3Nwtu9vnIagQKF0YVNmrenkt8bL1jo/B6r34ycGIat/+GX
       * 1dc3GxyOBxju2q4JMe5chXdR4HXX3uU9QaynD24D5tsFgTxGM2I8JqV6BXEXgbBZ
       * MXqtAjBcYd+krE1w135fuEYA6Nb/89QjLPcWXk92aS1K0WC39iAZxPsa7nyuhvRg
       * dGXGQX+RrJ8jHAS4a074C3eAB3wCecvDk9d+FoUI3kaczUd4Ew7vUY0FX55oO60N
       * qZxA5VwSHTfoH4fNPINeKr4Dx1mVLNcNM3z5qWcA6NKaAQak+arCnAYhLFCg/ydh
       * zEcEWW1ebI4Ab3aweR17jme2I+XoWEwIBtUX7op6K7RUb3x9cBdGy4PDw6syBQJ3
       * LExv8qZ43F9u0hD8UizpYQZESduT3x+To1/UQ3qBILuq2yszWaXP/kav1+fafLNb
       * yEuHE2EoB27vDv6hSpwlDrXesGoMCc5NlAZBLnWiUcwzu2X19ASWnBSAmQ==
       * =9AeP
       * -----END PGP MESSAGE-----
       */
      payload?: string;
      /**
       * Format: date-time
       * @description When the exit message was generated
       * @example 2023-01-14T01:13:59Z
       */
      updated_at?: string | null;
    };
    ETHSignedTx: {
      /**
       * @description Signed serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      signed_tx_serialized?: string;
    };
    ETHBroadcastTxPayload: {
      /**
       * @description Signed serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      tx_serialized: string;
    };
    ETHBroadcastedTx: {
      /**
       * @description Hash of the transaction
       * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
       */
      tx_hash?: string;
    };
    ETHPostKeysPayload: {
      /**
       * Format: uuid
       * @description Kiln Account ID to stake into.
       * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
       */
      account_id: string;
      /**
       * @description Ethereum withdrawal address used for the withdrawals credentials of the validators.
       * This is the address that will receive consensus rewards.
       * BLS format is not supported.
       * This address is used as the execution-layer fee-recipient unless `fee_recipient_address` is specified.
       * Only available for the `"native"` flavour.
       *
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      withdrawal_address?: string;
      /**
       * @description Ethereum fee-recipient address for execution rewards.
       * Uses the `withdrawal_address` both for consensus and execution rewards if not specified.
       * Only available for the `"native"` flavour.
       *
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      fee_recipient_address?: string;
      /**
       * @description Number of validator keys to generate. You can generate up to 150 keys at once.
       * @example 1
       */
      number: number;
      /**
       * @description Flavour to use to generate Ethereum keys. Use `"native"` for most cases.
       * The `"kiln-v1"` flavour infers the withdrawal credentials and fee recipient address from the generated validation key, the `kiln_v1_fee_recipient_contract_address` and the `kiln_v1_staking_contract_address`.
       * If no flavour is specified, uses `"native"`.
       *
       * @default native
       */
      flavour?: string;
      /**
       * @description Response format. Use "cli_deposit" for more information about each key.
       * @default batch_deposit
       * @example cli_deposit
       */
      format?: string;
      /**
       * @description Kiln V1 Smart-contract that will handle the dispatch of fees.
       * Only available for the `"kiln-v1"` flavour.
       *
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      kiln_v1_fee_recipient_contract_address?: string;
      /**
       * @description Kiln V1 Smart-contract used to stake generated keys.
       * Only available for the `"kiln-v1"` flavour.
       *
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      kiln_v1_staking_contract_address?: string;
    };
    ETHPostKeysCliResponse: {
        /**
         * @description Format of the key
         * @example cli_deposit
         */
        format?: string;
        /**
         * @description Public key of the validator
         * @example 8f36e2f4e921b1ed5ce9c94f21e1f26a748ac4e0c57f0d8973e7d576a2f8953b87dd86300de718238de23b1fecb19db5
         */
        pubkey?: string;
        /**
         * @description Withdrawals credentials of the validator
         * @example 010000000000000000000000e1f4acc0affb36a805474e3b6ab786738c6900a2
         */
        withdrawal_credentials?: string;
        /**
         * @description Amount in GWEI that needs to be deposited to activate the validator
         * @example 32000000000
         */
        amount?: number;
        /**
         * @description BLS signature for the deposit data structure required to stake on the Ethereum chain
         * @example b7947eabf631d4772c4014a9fec2ecac2c15fc5175ad83023bbdfc9e6618cb8e78829231477c060bc9339482058ff195141f2aeb801c0329a1a4afebd7e76ce0ba1d9d88f8820d052836a79d59aea673db9eb5009db4a4f6e04fb7ffbdbdd604
         */
        signature?: string;
        /**
         * @description Root hash ensuring the deposit message integrity
         * @example 65db6ae73c6465311a7acf2cd8a2863eececf09901872550639f0d8f6c1876f5
         */
        deposit_message_root?: string;
        /**
         * @description Root hash ensuring the deposit data integrity
         * @example 9b74cccf3a3c501374179be4bb6f505c4b40da41c205a101db3342a8df0af2dd
         */
        deposit_data_root?: string;
        /**
         * @description Identifier for the fork version
         * @example 00000000
         */
        fork_version?: string;
        /**
         * @description Ethereum network for the generated validation key(s)
         * @example mainnet
         */
        network_name?: string;
        /**
         * @description Version of the deposit-cli tool used to generate the validation key
         * @example 2.2.0
         */
        deposit_cli_version?: string;
      }[];
    ETHPostKeysBatchResponse: {
      /**
       * @description Format of the key
       * @example batch_deposit
       */
      format?: string;
      /**
       * @description Public keys of the validators
       * @example [
       *   "8f36e2f4e921b1ed5ce9c94f21e1f26a748ac4e0c57f0d8973e7d576a2f8953b87dd86300de718238de23b1fecb19db5"
       * ]
       */
      pubkeys?: string[];
      /**
       * @description Withdrawals credentials of the validators
       * @example [
       *   "010000000000000000000000e1f4acc0affb36a805474e3b6ab786738c6900a2"
       * ]
       */
      withdrawal_credentials?: string[];
      /**
       * @description BLS signatures for the deposit data structure required to stake on the Ethereum chain
       * @example [
       *   "b7947eabf631d4772c4014a9fec2ecac2c15fc5175ad83023bbdfc9e6618cb8e78829231477c060bc9339482058ff195141f2aeb801c0329a1a4afebd7e76ce0ba1d9d88f8820d052836a79d59aea673db9eb5009db4a4f6e04fb7ffbdbdd604"
       * ]
       */
      signatures?: string[];
      /**
       * @description Root hashes ensuring the deposit data integrity
       * @example [
       *   "37e329240dd23a4bcd86cd62b97fdf0873b565876f29678e1edbf5514fe344d6"
       * ]
       */
      deposit_data_roots?: string[];
    };
    ETHCraftStakeTxPayload: {
      /**
       * Format: uuid
       * @description Kiln Account ID to stake into
       * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
       */
      account_id: string;
      /**
       * @description Wallet to stake from and be used as a withdrawal credentials in the deposit. Losing access to this wallet will result in losing the stake.
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      wallet: string;
      /**
       * @description Amount to stake in WEI (must be a multiple of "32000000000000000000")
       * @example 32000000000000000000
       */
      amount_wei: string;
    };
    ETHPrepareTxPayload: {
      /**
       * @description Unsigned serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      unsigned_tx_serialized: string;
      /**
       * @description r part of the ECDSA signature in hex
       * @example de28e9efee4c8de422a3c64bfaaee11a32f7cf12bdd3f00dcce41a79fe776c65
       */
      r: string;
      /**
       * @description s part of the ECDSA signature in hex
       * @example 3f233eb69495fa4741ad28ef0ba40612bacaf08331fd76041c371f5a2ecc2ab5
       */
      s: string;
      /**
       * @description v part of the ECDSA signature (0 or 1)
       * @example 0
       */
      v: number;
    };
    ETHTxStatus: {
      /**
       * @description Transaction status
       * @example success
       */
      status?: string;
      /**
       * @description Transaction receipt. Object shape can be found [here](https://github.com/web3/web3.js/blob/c5072a35996eb232e2742e92b612c07ba7af98ab/packages/web3-types/src/eth_types.ts#L299)
       * @example {
       *   "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
       *   "blockNumber": 8608123,
       *   "contractAddress": null,
       *   "cumulativeGasUsed": 8180146,
       *   "effectiveGasPrice": 27391741855,
       *   "from": "0x9ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
       *   "gasUsed": 70098,
       *   "logs": [
       *     {
       *       "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
       *       "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
       *       "blockNumber": 8608123,
       *       "data": "0x00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb550000000000000000000000000000000000000000000000000000000000000008004059730700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609395a07d5e7eb073725049ecba8144d850b7a1a58f603fd1fc12049d32c98db47e3d81608074bca20ccdcc94f7f4767d0d6b852edf4f6231532f33242e64d0617ac93465bc4cdabe9cebf0abe6d169830fcf375b28c0641487e5f86df2875a970000000000000000000000000000000000000000000000000000000000000008ecce030000000000000000000000000000000000000000000000000000000000",
       *       "logIndex": 150,
       *       "removed": false,
       *       "topics": [
       *         "0x649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c5"
       *       ],
       *       "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
       *       "transactionIndex": 33,
       *       "id": "log_4115d183"
       *     },
       *     {
       *       "address": "0x5FaDfdb7eFffd3B4AA03f0F29d9200Cf5F191F31",
       *       "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
       *       "blockNumber": 8608123,
       *       "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
       *       "logIndex": 151,
       *       "removed": false,
       *       "topics": [
       *         "0x737feedde71ce80c08f73125e4350b001be2dfb6a00fb455086c2b0a514cdfac"
       *       ],
       *       "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
       *       "transactionIndex": 33,
       *       "id": "log_b4bb5ff7"
       *     }
       *   ],
       *   "logsBloom": "0x
       *   "status": true,
       *   "to": "0x5fadfdb7efffd3b4aa03f0f29d9200cf5f191f31",
       *   "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
       *   "transactionIndex": 33,
       *   "type": "0x2"
       * }
       */
      receipt?: Record<string, never>;
    };
    XTZStake: {
      /**
       * @description Wallet address of the delegator
       * @example tz1VZ4iC4wzTR7iK2Q7PoQGVDAojuY42fDxD
       */
      stake_address?: string;
      /**
       * @description Address of the baker
       * @example tz2FCNBrERXtaTtNX6iimR1UJ5JSDxvdHM93
       */
      baker_address?: string;
      /**
       * @description State of the Tezos stake
       * @example active
       */
      state?: string;
      /**
       * Format: date-time
       * @description Date at which the stake started earning rewards
       * @example 2023-01-14T01:13:59Z
       */
      activated_at?: string | null;
      /**
       * @description Cycle at which the stake started earning rewards
       * @example 542
       */
      activated_cycle?: number | null;
      /**
       * Format: date-time
       * @description Cycle in which the delegation transaction was made
       * @example 2023-01-14T01:13:59Z
       */
      delegated_at?: string | null;
      /**
       * @description Date at which the staking transaction was made, corresponds to the block it was part of.
       * @example 542
       */
      delegated_cycle?: number | null;
      /**
       * @description Block at which the corresponding staking transaction was executed
       * @example 16397387
       */
      delegated_block?: string | null;
      /**
       * @description Current active balance earning rewards in mutez
       * @example 32076187808000000000
       */
      balance?: string | null;
      /**
       * @description Wallet balance in mutez, this is a daily snapshot done every night.
       * @example 32076187808000000000
       */
      wallet_balance?: string | null;
      /**
       * @description Sum of rewards in mutez earned by this stake since delegation
       * @example 76187808000000000
       */
      rewards?: string | null;
      /**
       * @description Gross annual percentage yield
       * @example 3.407
       */
      gross_apy?: number | null;
      /**
       * Format: date-time
       * @description Last date this data was updated
       * @example 2023-01-14T01:13:59Z
       */
      updated_at?: string | null;
    };
    XTZDailyReward: {
      /**
       * Format: date
       * @description Day for this reward entry
       * @example 2023-01-15
       */
      date: string;
      /**
       * @description Rewards earned for that day in mutez
       * @example 27098488
       */
      rewards?: string;
      /**
       * @description Wallet balance for that day in mutez
       * @example 420000000000
       */
      active_balance?: string;
      /**
       * @description Gross annual percentage yield
       * @example 3.42
       */
      gross_apy?: number;
    };
    XTZCycleReward: {
      /**
       * @description The cycle number
       * @example 271
       */
      cycle: number;
      /**
       * Format: date-time
       * @description The date at which the cycle began
       * @example 2022-09-01T08:44:00Z
       */
      cycle_begins_at: string;
      /**
       * @description The rewards for that cycle in mutez
       * @example 27098488
       */
      rewards?: string;
      /**
       * @description Wallet balance for that cycle in mutez
       * @example 34329999165
       */
      active_balance?: string;
      /**
       * @description Gross annual percentage yield
       * @example 36.053
       */
      gross_apy?: number;
    };
    XTZNetworkStats: {
      /**
       * @description Number of active bakers
       * @example 402
       */
      nb_validators?: number;
      /**
       * @description Gross annual percentage yield
       * @example 4.5
       */
      network_gross_apy?: number;
      /**
       * @description Supply percentage of Tezos currently staked
       * @example 12.4
       */
      supply_staked_percent?: number;
      /**
       * Format: date-time
       * @description Last date this data was updated
       * @example 2023-01-14T01:13:59Z
       */
      updated_at?: string | null;
      /**
       * @description XTZ price in USD
       * @example 3.5
       */
      xtz_price_usd?: number;
    };
    XTZOperationDelegate: {
      /**
       * @description Type of the operation
       * @example delegate
       */
      type?: string;
      /**
       * Format: date-time
       * @description When did the operation occur in an RFC3339 format
       * @example 2023-01-14T01:13:59Z
       */
      date?: string;
      /**
       * @description The wallet address for the stake
       * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
       */
      staker_address?: string;
      /**
       * @description The baker address to which the wallet is staked
       * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
       */
      baker_address?: string;
      /**
       * @description The operation hash
       * @example opLq44uJLP7f3V3zCVDCDgXayV3CQLGqihdoAYtMnXLW4f1q2fb
       */
      operation?: string;
      /**
       * @description The operation gas used if any
       * @example 10
       */
      operation_gas_used?: string;
      /**
       * @description The operation baker fee if applicable
       * @example 42
       */
      baker_fee?: string;
      /**
       * @description The block number in which the operation was included
       * @example 1342
       */
      block?: number;
      /**
       * @description The delegated amount
       * @example 420000
       */
      amount?: string;
    };
    XTZOperationUndelegate: {
      /**
       * @description Type of the operation
       * @example undelegate
       */
      type?: string;
      /**
       * Format: date-time
       * @description When did the operation occur in an RFC3339 format
       * @example 2023-01-14T01:13:59Z
       */
      date?: string;
      /**
       * @description The wallet address for the stake
       * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
       */
      staker_address?: string;
      /**
       * @description The baker address to which the wallet is staked
       * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
       */
      baker_address?: string;
      /**
       * @description The operation hash
       * @example opLq44uJLP7f3V3zCVDCDgXayV3CQLGqihdoAYtMnXLW4f1q2fb
       */
      operation?: string;
      /**
       * @description The operation gas used if any
       * @example 10
       */
      operation_gas_used?: string;
      /**
       * @description The operation baker fee if applicable
       * @example 42
       */
      baker_fee?: string;
      /**
       * @description The block number in which the operation was included
       * @example 1342
       */
      block?: number;
    };
    XTZOperationActivation: {
      /**
       * @description Type of the operation
       * @example activation
       */
      type?: string;
      /**
       * Format: date-time
       * @description When did the operation occur in an RFC3339 format
       * @example 2023-01-14T01:13:59Z
       */
      date?: string;
      /**
       * @description The wallet address for the stake
       * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
       */
      staker_address?: string;
      /**
       * @description The baker address to which the wallet is staked
       * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
       */
      baker_address?: string;
      /**
       * @description The cycle at which the stake was active and started earning
       * @example 585
       */
      cycle?: number;
    };
    XTZOperationPayment: {
      /**
       * @description Type of the operation
       * @example payment
       */
      type?: string;
      /**
       * Format: date-time
       * @description When did the operation occur in an RFC3339 format
       * @example 2023-01-14T01:13:59Z
       */
      date?: string;
      /**
       * @description The wallet address for the stake
       * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
       */
      staker_address?: string;
      /**
       * @description The baker address to which the wallet is staked
       * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
       */
      baker_address?: string;
      /**
       * @description The address that executed the payment
       * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
       */
      sender_address?: string;
      /**
       * @description The operation hash
       * @example opLq44uJLP7f3V3zCVDCDgXayV3CQLGqihdoAYtMnXLW4f1q2fb
       */
      operation?: string;
      /**
       * @description The operation gas used if any
       * @example 10
       */
      operation_gas_used?: string;
      /**
       * @description The operation baker fee if applicable
       * @example 42
       */
      baker_fee?: string;
      /**
       * @description The block number in which the operation was included
       * @example 1342
       */
      block?: number;
      /**
       * @description The reward amount that was paid out
       * @example 4200
       */
      amount?: string;
    };
    XTZCraftStakeTxPayload: {
      /**
       * Format: uuid
       * @description Kiln Account ID to stake into
       * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
       */
      account_id: string;
      /**
       * @description Wallet that you wish to delegate from
       * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
       */
      wallet: string;
      /**
       * @description Baker address to delegate to.
       * @example tz3btDQsDkqq2G7eBdrrLqetaAfLVw6BnPez
       */
      baker_address: string;
    };
    XTZCraftUnStakeTxPayload: {
      /**
       * @description Wallet that you wish to undelegate
       * @example tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd
       */
      wallet: string;
    };
    ADACraftStakeTxPayload: {
      /**
       * Format: uuid
       * @description Kiln Account ID to stake into
       * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
       */
      account_id: string;
      /**
       * @description Wallet that you wish to delegate from
       * @example addr1q8rmz6kk2te6z2p44l2uvjgmf5cj5r6l0nwnw6xqk4srnlr5kh8wvl8mw3na7m3fd2py8n3zqs6ueqe0gwcuf9a77z9sxdz9xr
       */
      wallet: string;
      /**
       * @description Pool id to delegate to
       * @example pool10rdglgh4pzvkf936p2m669qzarr9dusrhmmz9nultm3uvq4eh5k
       */
      pool_id: string;
    };
    ADACraftWithdrawRewardsTxPayload: {
      /**
       * @description Wallet that you wish to withdraw rewards to
       * @example addr1q8rmz6kk2te6z2p44l2uvjgmf5cj5r6l0nwnw6xqk4srnlr5kh8wvl8mw3na7m3fd2py8n3zqs6ueqe0gwcuf9a77z9sxdz9xr
       */
      wallet: string;
      /**
       * @description Optional amount of rewards to withdraw in lovelace. 1 ADA = 1,000,000 lovelace. If omitted, all available rewards will be withdrawn.
       * @example 1000000
       */
      amount_lovelace?: string;
    };
    ADACraftUnstakeTxPayload: {
      /**
       * @description Wallet that you wish to undelegate
       * @example addr1q8rmz6kk2te6z2p44l2uvjgmf5cj5r6l0nwnw6xqk4srnlr5kh8wvl8mw3na7m3fd2py8n3zqs6ueqe0gwcuf9a77z9sxdz9xr
       */
      wallet: string;
    };
    ADAPrepareTxPayload: {
      /**
       * @description Unsigned serialized transaction
       * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
       */
      unsigned_tx_serialized: string;
      /**
       * @description Signed messages
       * @example null
       */
      signed_messages: {
          /** @description Public key of the signing key */
          pubkey?: string;
          /** @description Signature of the message */
          signature?: string;
        }[];
    };
    ADABroadcastTxPayload: {
      /**
       * @description Signed serialized transaction
       * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
       */
      tx_serialized: string;
    };
    ADATxStatus: {
      /**
       * @description Transaction status
       * @example success
       */
      status?: string;
      /**
       * @description Transaction receipt. Object shape can be found [here](https://github.com/blockfrost/openapi/blob/master/src/generated-types.ts#L4493)
       * @example {
       *   "hash": "20082206aadbbb2dfded4afc9346831c5bd3a6a3f8a75f59dbe6166c05e918f6",
       *   "block": "2612449e345ec0f58aae05c693a09943f599592e28eedec70ee8c1a4f3d1e834",
       *   "block_height": 660450,
       *   "block_time": 1677170968,
       *   "slot": 21487768,
       *   "index": 1,
       *   "output_amount": [
       *     {
       *       "unit": "lovelace",
       *       "quantity": "10027100000"
       *     }
       *   ],
       *   "fees": "300000",
       *   "deposit": "2000000",
       *   "size": 429,
       *   "invalid_before": null,
       *   "invalid_hereafter": "21494910",
       *   "utxo_count": 2,
       *   "withdrawal_count": 0,
       *   "mir_cert_count": 0,
       *   "delegation_count": 1,
       *   "stake_cert_count": 1,
       *   "pool_update_count": 0,
       *   "pool_retire_count": 0,
       *   "asset_mint_or_burn_count": 0,
       *   "redeemer_count": 0,
       *   "valid_contract": true
       * }
       */
      receipt?: Record<string, never>;
    };
    ETHUnsignedTx: {
      /**
       * @description Hash of the unsigned transaction
       * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
       */
      unsigned_tx_hash?: string;
      /**
       * @description Unsigned serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      unsigned_tx_serialized?: string;
      /**
       * @description Contract address of the transaction recipient
       * @example 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852
       */
      to?: string;
      /**
       * @description Hex encoded contract data to be sent with the transaction
       * @example 0xca0bfcce0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000309696c02ec4dbb99f714e26ff1acdf6b258d36dcbad7b8b549553bc99b94ea639cd247f31683564995afd48568c1b6edd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020010000000000000000000000bc86717bad3f8ccf86d2882a6bc351c94580a994000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060a3869da2ed5cc558f016d59fc5ceb0cac28e58743836aa3cf146221f1ef0b959e3cc5c589e05e171f1473596aadf36411767ad92edaae421ba0291bd7568267b3faabc3ab6ed9ddfc048ea6640370977f16f4f626a0e567a11ba25acdc520bb000000000000000000000000000000000000000000000000000000000000000012dd65914dda46639df6344701de54ac3ebe34a4b230262d3017fcd6c29954452
       */
      contract_call_data?: string;
      /**
       * @description Amount of ETH to send in wei
       * @example 32000000000000000000
       */
      amount_wei?: string;
      /**
       * @description Nonce of the transaction
       * @example 1
       */
      nonce?: number;
      /**
       * @description Gas limit of the transaction in gas units. We provide a default value of two times the estimated gas limit
       * @example 140244
       */
      gas_limit?: number;
      /**
       * @description Max priority fee per gas in wei. This is basically the miner fee. We provide a default value of 2 gwei so transactions are mined faster.
       * @example 2000000000
       */
      max_priority_fee_per_gas_wei?: string;
      /**
       * @description Max fee per gas in wei. This is the maxium amount of gas that you are willing to pay for the transaction.
       * @example 383687469748
       */
      max_fee_per_gas_wei?: string;
      /**
       * @description Chain ID of the network
       * @example 1
       */
      chain_id?: number;
    };
    XTZPrepareTxPayload: {
      /**
       * @description Unsigned serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      unsigned_tx_serialized: string;
      /**
       * @description Transaction signature in hex
       * @example de28e9efee4c8de422a3c64bfaaee11a32f7cf12bdd3f00dcce41a79fe776c65
       */
      signature: string;
    };
    XTZUnsignedTx: {
      /**
       * @description Hash of the unsigned transaction
       * @example 7383fbcd64c1d95c92b5ebee44a569f15e557a773b6d733ab7bb4e3ce98de812
       */
      unsigned_tx_hash?: string;
      /**
       * @description Unsigned serialized transaction
       * @example aef6da4e377364f07c2aa460d7148a8971dab767417b541fa473b2d8e038974f6e00566eaa0198f3df9230489abd1a64f5ef9b98b270940ac4cb9807f44e00ff00344c5e59a1de5370e1cee5d2fcf706a649bba15b
       */
      unsigned_tx_serialized?: string;
      /**
       * @description Transaction object. Object shape can be found [here](https://github.com/ecadlabs/taquito/blob/master/packages/taquito-local-forging/src/interface.ts#L3)
       * @example {
       *   "branch": "BM3LZcG2SNz2DCWVGAAvT3gd8Vc17dS649CG6o9PhwJjmpUTptA",
       *   "contents": [
       *     {
       *       "kind": "delegation",
       *       "source": "tz1TX3Nh6h6js1VxXCuQ7rAF7LoGpd81FSw3",
       *       "fee": "1300",
       *       "counter": "15082948",
       *       "gas_limit": "10100",
       *       "storage_limit": "0",
       *       "delegate": "tz1QQZKGt3ouyd7x8JUDwcvRyxzsmD7CFbMd"
       *     }
       *   ]
       * }
       */
      unsigned_tx?: Record<string, never>;
    };
    XTZSignedTx: {
      /**
       * @description Signed serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      signed_tx_serialized?: string;
    };
    XTZBroadcastTxPayload: {
      /**
       * @description Signed serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      tx_serialized: string;
    };
    XTZBroadcastedTx: {
      /**
       * @description Hash of the transaction
       * @example oo3UAUpr685s3F7Fmc2ry8KHo4vdWGKo7LeimesAg56NBd6sDjs
       */
      tx_hash?: string;
    };
    XTZTxStatus: {
      /**
       * @description Transaction status
       * @example applied
       */
      status?: string;
      /**
       * @description Transaction receipt. Object shape can be found [here](https://github.com/ecadlabs/taquito/blob/master/packages/taquito-rpc/src/types.ts#L1206)
       * @example {
       *   "protocol": "PtMumbai2TmsJHNGRkD8v8YDbtao7BLUC3wjASn1inAKLFCjaH1",
       *   "chain_id": "NetXnHfVqm9iesp",
       *   "hash": "op2Gu3xpBifNmj1dD88gwFdXuN4HT7EiqPcaERPCdyf48nYwZa9",
       *   "branch": "BMUmBJ3CSxDdzEUUYuS47DNHDv8ayxyMh12zSWZ7hKzYtv8Ny7S",
       *   "contents": [
       *     {
       *       "kind": "transaction",
       *       "source": "tz3TMbNR6YcMmRvXpssLi7wNr7RrBKsgruYU",
       *       "fee": "10277",
       *       "counter": "15413092",
       *       "gas_limit": "100000",
       *       "storage_limit": "30",
       *       "amount": "0",
       *       "destination": "KT1VbeN9etQe5c2b6EAFfCZVaSTpiieHj5u1",
       *       "parameters": {
       *         "entrypoint": "tick",
       *         "value": {
       *           "string": "tzBTC/EURL"
       *         }
       *       },
       *       "metadata": {
       *         "balance_updates": [
       *           {
       *             "kind": "contract",
       *             "contract": "tz3TMbNR6YcMmRvXpssLi7wNr7RrBKsgruYU",
       *             "change": "-10277",
       *             "origin": "block"
       *           },
       *           {
       *             "kind": "accumulator",
       *             "category": "block fees",
       *             "change": "10277",
       *             "origin": "block"
       *           }
       *         ],
       *         "operation_result": {
       *           "status": "applied",
       *           "storage": {
       *             "prim": "Pair",
       *             "args": [
       *               [
       *                 {
       *                   "prim": "Pair",
       *                   "args": [
       *                     {
       *                       "prim": "Pair",
       *                       "args": [
       *                         {
       *                           "bytes": "0000b9ba1078c3324ee4e0162c28cbda4765c6518d21"
       *                         },
       *                         {
       *                           "prim": "Pair",
       *                           "args": [
       *                             [
       *                               {
       *                                 "prim": "Elt",
       *                                 "args": [
       *                                   {
       *                                     "string": "tzBTC/EURL"
       *                                   },
       *                                   {
       *                                     "int": "2078"
       *                                   }
       *                                 ]
       *                               },
       *                               {
       *                                 "prim": "Elt",
       *                                 "args": [
       *                                   {
       *                                     "string": "tzBTC/USDT"
       *                                   },
       *                                   {
       *                                     "int": "2079"
       *                                   }
       *                                 ]
       *                               }
       *                             ],
       *                             {
       *                               "int": "288949"
       *                             }
       *                           ]
       *                         }
       *                       ]
       *                     },
       *                     {
       *                       "prim": "Pair",
       *                       "args": [
       *                         {
       *                           "int": "600"
       *                         },
       *                         {
       *                           "int": "10000"
       *                         }
       *                       ]
       *                     }
       *                   ]
       *                 },
       *                 {
       *                   "prim": "Pair",
       *                   "args": [
       *                     {
       *                       "bytes": "0000b28066369a8ed09ba9d3d47f19598440266013f0"
       *                     },
       *                     {
       *                       "int": "63"
       *                     }
       *                   ]
       *                 },
       *                 {
       *                   "int": "10"
       *                 },
       *                 {
       *                   "int": "288950"
       *                 }
       *               ],
       *               {
       *                 "prim": "Pair",
       *                 "args": [
       *                   {
       *                     "prim": "Pair",
       *                     "args": [
       *                       {
       *                         "prim": "Pair",
       *                         "args": [
       *                           {
       *                             "int": "288951"
       *                           },
       *                           {
       *                             "int": "1"
       *                           }
       *                         ]
       *                       },
       *                       {
       *                         "prim": "Pair",
       *                         "args": [
       *                           {
       *                             "int": "288952"
       *                           },
       *                           [
       *                             {
       *                               "prim": "Elt",
       *                               "args": [
       *                                 {
       *                                   "string": "tzBTC/EURL"
       *                                 },
       *                                 [
       *                                   [
       *                                     {
       *                                       "prim": "Pair",
       *                                       "args": [
       *                                         [
       *                                           {
       *                                             "int": "0"
       *                                           },
       *                                           {
       *                                             "string": "tzBTC"
       *                                           },
       *                                           {
       *                                             "prim": "Some",
       *                                             "args": [
       *                                               {
       *                                                 "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
       *                                               }
       *                                             ]
       *                                           },
       *                                           {
       *                                             "int": "8"
       *                                           },
       *                                           {
       *                                             "prim": "Some",
       *                                             "args": [
       *                                               {
       *                                                 "string": "FA1.2 token"
       *                                               }
       *                                             ]
       *                                           }
       *                                         ],
       *                                         {
       *                                           "int": "1"
       *                                         }
       *                                       ]
       *                                     },
       *                                     {
       *                                       "int": "0"
       *                                     },
       *                                     {
       *                                       "string": "EURL"
       *                                     },
       *                                     {
       *                                       "prim": "Some",
       *                                       "args": [
       *                                         {
       *                                           "bytes": "01dcb37511b08da5f8d794b690c7ad6a03206af75200"
       *                                         }
       *                                       ]
       *                                     },
       *                                     {
       *                                       "int": "6"
       *                                     },
       *                                     {
       *                                       "prim": "Some",
       *                                       "args": [
       *                                         {
       *                                           "string": "FA2 token"
       *                                         }
       *                                       ]
       *                                     }
       *                                   ],
       *                                   {
       *                                     "bytes": "01334d567a3617a22597eb783a65b04630e97c7fd600"
       *                                   },
       *                                   {
       *                                     "string": "BTC-EUR"
       *                                   },
       *                                   {
       *                                     "int": "6"
       *                                   },
       *                                   {
       *                                     "prim": "False"
       *                                   }
       *                                 ]
       *                               ]
       *                             },
       *                             {
       *                               "prim": "Elt",
       *                               "args": [
       *                                 {
       *                                   "string": "tzBTC/USDT"
       *                                 },
       *                                 [
       *                                   [
       *                                     {
       *                                       "prim": "Pair",
       *                                       "args": [
       *                                         [
       *                                           {
       *                                             "int": "0"
       *                                           },
       *                                           {
       *                                             "string": "tzBTC"
       *                                           },
       *                                           {
       *                                             "prim": "Some",
       *                                             "args": [
       *                                               {
       *                                                 "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
       *                                               }
       *                                             ]
       *                                           },
       *                                           {
       *                                             "int": "8"
       *                                           },
       *                                           {
       *                                             "prim": "Some",
       *                                             "args": [
       *                                               {
       *                                                 "string": "FA1.2 token"
       *                                               }
       *                                             ]
       *                                           }
       *                                         ],
       *                                         {
       *                                           "int": "1"
       *                                         }
       *                                       ]
       *                                     },
       *                                     {
       *                                       "int": "0"
       *                                     },
       *                                     {
       *                                       "string": "USDT"
       *                                     },
       *                                     {
       *                                       "prim": "Some",
       *                                       "args": [
       *                                         {
       *                                           "bytes": "015dfb31bce51b9f71200fab36654d50cd877ef39500"
       *                                         }
       *                                       ]
       *                                     },
       *                                     {
       *                                       "int": "6"
       *                                     },
       *                                     {
       *                                       "prim": "Some",
       *                                       "args": [
       *                                         {
       *                                           "string": "FA2 token"
       *                                         }
       *                                       ]
       *                                     }
       *                                   ],
       *                                   {
       *                                     "bytes": "01334d567a3617a22597eb783a65b04630e97c7fd600"
       *                                   },
       *                                   {
       *                                     "string": "BTC-USDT"
       *                                   },
       *                                   {
       *                                     "int": "6"
       *                                   },
       *                                   {
       *                                     "prim": "False"
       *                                   }
       *                                 ]
       *                               ]
       *                             }
       *                           ]
       *                         ]
       *                       }
       *                     ]
       *                   },
       *                   [
       *                     {
       *                       "prim": "Elt",
       *                       "args": [
       *                         {
       *                           "string": "EURL"
       *                         },
       *                         [
       *                           {
       *                             "int": "0"
       *                           },
       *                           {
       *                             "string": "EURL"
       *                           },
       *                           {
       *                             "prim": "Some",
       *                             "args": [
       *                               {
       *                                 "bytes": "01dcb37511b08da5f8d794b690c7ad6a03206af75200"
       *                               }
       *                             ]
       *                           },
       *                           {
       *                             "int": "6"
       *                           },
       *                           {
       *                             "prim": "Some",
       *                             "args": [
       *                               {
       *                                 "string": "FA2 token"
       *                               }
       *                             ]
       *                           }
       *                         ]
       *                       ]
       *                     },
       *                     {
       *                       "prim": "Elt",
       *                       "args": [
       *                         {
       *                           "string": "USDT"
       *                         },
       *                         [
       *                           {
       *                             "int": "0"
       *                           },
       *                           {
       *                             "string": "USDT"
       *                           },
       *                           {
       *                             "prim": "Some",
       *                             "args": [
       *                               {
       *                                 "bytes": "015dfb31bce51b9f71200fab36654d50cd877ef39500"
       *                               }
       *                             ]
       *                           },
       *                           {
       *                             "int": "6"
       *                           },
       *                           {
       *                             "prim": "Some",
       *                             "args": [
       *                               {
       *                                 "string": "FA2 token"
       *                               }
       *                             ]
       *                           }
       *                         ]
       *                       ]
       *                     },
       *                     {
       *                       "prim": "Elt",
       *                       "args": [
       *                         {
       *                           "string": "tzBTC"
       *                         },
       *                         [
       *                           {
       *                             "int": "0"
       *                           },
       *                           {
       *                             "string": "tzBTC"
       *                           },
       *                           {
       *                             "prim": "Some",
       *                             "args": [
       *                               {
       *                                 "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
       *                               }
       *                             ]
       *                           },
       *                           {
       *                             "int": "8"
       *                           },
       *                           {
       *                             "prim": "Some",
       *                             "args": [
       *                               {
       *                                 "string": "FA1.2 token"
       *                               }
       *                             ]
       *                           }
       *                         ]
       *                       ]
       *                     }
       *                   ]
       *                 ]
       *               }
       *             ]
       *           },
       *           "balance_updates": [
       *             {
       *               "kind": "contract",
       *               "contract": "tz3TMbNR6YcMmRvXpssLi7wNr7RrBKsgruYU",
       *               "change": "-2500",
       *               "origin": "block"
       *             },
       *             {
       *               "kind": "burned",
       *               "category": "storage fees",
       *               "change": "2500",
       *               "origin": "block"
       *             }
       *           ],
       *           "consumed_milligas": "6668844",
       *           "storage_size": "1231820",
       *           "paid_storage_size_diff": "10",
       *           "lazy_storage_diff": [
       *             {
       *               "kind": "big_map",
       *               "id": "288952",
       *               "diff": {
       *                 "action": "update",
       *                 "updates": []
       *               }
       *             },
       *             {
       *               "kind": "big_map",
       *               "id": "288951",
       *               "diff": {
       *                 "action": "update",
       *                 "updates": [
       *                   {
       *                     "key_hash": "exprv54v2iFYQ5fHRM2GLzRgZKHpf3suvC9jyke2F3TcFwDxExPRjB",
       *                     "key": {
       *                       "string": "tzBTC/EURL"
       *                     },
       *                     "value": {
       *                       "prim": "Pair",
       *                       "args": [
       *                         [
       *                           {
       *                             "prim": "Pair",
       *                             "args": [
       *                               [
       *                                 {
       *                                   "int": "0"
       *                                 },
       *                                 {
       *                                   "string": "tzBTC"
       *                                 },
       *                                 {
       *                                   "prim": "Some",
       *                                   "args": [
       *                                     {
       *                                       "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
       *                                     }
       *                                   ]
       *                                 },
       *                                 {
       *                                   "int": "8"
       *                                 },
       *                                 {
       *                                   "prim": "Some",
       *                                   "args": [
       *                                     {
       *                                       "string": "FA1.2 token"
       *                                     }
       *                                   ]
       *                                 }
       *                               ],
       *                               {
       *                                 "int": "1"
       *                               }
       *                             ]
       *                           },
       *                           {
       *                             "int": "0"
       *                           },
       *                           {
       *                             "string": "EURL"
       *                           },
       *                           {
       *                             "prim": "Some",
       *                             "args": [
       *                               {
       *                                 "bytes": "01dcb37511b08da5f8d794b690c7ad6a03206af75200"
       *                               }
       *                             ]
       *                           },
       *                           {
       *                             "int": "6"
       *                           },
       *                           {
       *                             "prim": "Some",
       *                             "args": [
       *                               {
       *                                 "string": "FA2 token"
       *                               }
       *                             ]
       *                           }
       *                         ],
       *                         {
       *                           "prim": "Pair",
       *                           "args": [
       *                             {
       *                               "prim": "Pair",
       *                               "args": [
       *                                 {
       *                                   "int": "2664904905100"
       *                                 },
       *                                 {
       *                                   "int": "10000000000"
       *                                 }
       *                               ]
       *                             },
       *                             {
       *                               "int": "1683299700"
       *                             }
       *                           ]
       *                         }
       *                       ]
       *                     }
       *                   }
       *                 ]
       *               }
       *             },
       *             {
       *               "kind": "big_map",
       *               "id": "288950",
       *               "diff": {
       *                 "action": "update",
       *                 "updates": []
       *               }
       *             },
       *             {
       *               "kind": "big_map",
       *               "id": "288949",
       *               "diff": {
       *                 "action": "update",
       *                 "updates": [
       *                   {
       *                     "key_hash": "exprtX5LinYF4NkttwZC7Y6eqfXT38Dxq1KBV1ctmQAfzsGb1G3nap",
       *                     "key": {
       *                       "int": "2078"
       *                     },
       *                     "value": [
       *                       {
       *                         "int": "2078"
       *                       },
       *                       {
       *                         "prim": "Left",
       *                         "args": [
       *                           {
       *                             "prim": "Right",
       *                             "args": [
       *                               {
       *                                 "prim": "Pair",
       *                                 "args": [
       *                                   {
       *                                     "int": "1683299741"
       *                                   },
       *                                   {
       *                                     "int": "1683299141"
       *                                   }
       *                                 ]
       *                               }
       *                             ]
       *                           }
       *                         ]
       *                       },
       *                       [
       *                         {
       *                           "int": "0"
       *                         },
       *                         {
       *                           "int": "0"
       *                         },
       *                         {
       *                           "int": "0"
       *                         },
       *                         {
       *                           "int": "0"
       *                         },
       *                         {
       *                           "int": "0"
       *                         },
       *                         {
       *                           "int": "0"
       *                         },
       *                         {
       *                           "int": "0"
       *                         },
       *                         {
       *                           "int": "0"
       *                         }
       *                       ],
       *                       [
       *                         {
       *                           "int": "0"
       *                         },
       *                         {
       *                           "string": "tzBTC"
       *                         },
       *                         {
       *                           "prim": "Some",
       *                           "args": [
       *                             {
       *                               "bytes": "019f8e6d69a501e050b36807de00fdc3f694dda39000"
       *                             }
       *                           ]
       *                         },
       *                         {
       *                           "int": "8"
       *                         },
       *                         {
       *                           "prim": "Some",
       *                           "args": [
       *                             {
       *                               "string": "FA1.2 token"
       *                             }
       *                           ]
       *                         }
       *                       ],
       *                       {
       *                         "int": "0"
       *                       },
       *                       {
       *                         "string": "EURL"
       *                       },
       *                       {
       *                         "prim": "Some",
       *                         "args": [
       *                           {
       *                             "bytes": "01dcb37511b08da5f8d794b690c7ad6a03206af75200"
       *                           }
       *                         ]
       *                       },
       *                       {
       *                         "int": "6"
       *                       },
       *                       {
       *                         "prim": "Some",
       *                         "args": [
       *                           {
       *                             "string": "FA2 token"
       *                           }
       *                         ]
       *                       }
       *                     ]
       *                   }
       *                 ]
       *               }
       *             }
       *           ]
       *         }
       *       }
       *     }
       *   ],
       *   "signature": "sigaYuApxhkynr4VUasNY6GsSstUvVrcoS84VHtXv6V5e5Fmoqg17oEEsf5Vpahjrx1EFuPhnm4BnPwrxVyXrqh71uhG5Tf7"
       * }
       */
      receipt?: Record<string, never>;
    };
    ADAUnsignedTx: {
      /**
       * @description Hash of the unsigned transaction
       * @example ea62bc381a2d8fc338f24634674a168fdc8f1a09b978f24f026041f4e00c876f
       */
      unsigned_tx_hash?: string;
      /**
       * @description Unsigned serialized transaction
       * @example 84a500818258203d244a2821a0cb32df614cf4380e6c6e0114bc7c734cfa2a3940498ad86865e100018182583900491a1d0747fa91f319625e39076232ad4cc274e3257f345ced82dbb2a8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b1b0000000255928400021a000493e0031a01ad4330048282008200581ca8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b83028200581ca8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b581ce54d5f9340218a9816cafafc92dc3d5212b6d149ce75e9637cbcd7e0a0f5f6
       */
      unsigned_tx_serialized?: string;
      /**
       * @description List of inputs to spend
       * @example [
       *   {
       *     "transaction_id": "3d244a2821a0cb32df614cf4380e6c6e0114bc7c734cfa2a3940498ad86865e1",
       *     "index": 0
       *   }
       * ]
       */
      inputs?: Record<string, never>[];
    };
    ADASignedTx: {
      /**
       * @description Signed serialized transaction
       * @example 84a500818258203d244a2821a0cb32df614cf4380e6c6e0114bc7c734cfa2a3940498ad86865e100018182583900491a1d0747fa91f319625e39076232ad4cc274e3257f345ced82dbb2a8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b1b0000000255928400021a000493e0031a01ad4330048282008200581ca8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b83028200581ca8565045c49103b521a3827ff64b98889350a22fa9a0b5ccf72b279b581ce54d5f9340218a9816cafafc92dc3d5212b6d149ce75e9637cbcd7e0a0f5f6
       */
      signed_tx_serialized?: string;
    };
    ADATxHash: {
      /**
       * @description Hash of the transaction
       * @example 7f12d9eacd762d130838289397480e495db0fd268bd3be4fd55c74a74fd8372d
       */
      tx_hash?: string;
    };
    SOLStake: {
      /**
       * @description Delegated stake account
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      stake_account?: string;
      /**
       * @description Vote account to which this stake was re-delegated.
       * @example 6hNweZvzTudTuprZrAXb1A9grKvVG6xgjyvdJUqAMk78
       */
      vote_account?: string;
      /**
       * @description Withdraw pubkey
       * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
       */
      withdraw_pubkey?: string | null;
      /**
       * @description Stake state
       * @example active
       */
      state?: string;
      /**
       * Format: date-time
       * @description Date at which this stake was activated
       * @example 2023-01-14T01:13:59Z
       */
      activated_at?: string;
      /**
       * @description Epoch at which this stake was activated
       * @example 150
       */
      activated_epoch?: number;
      /**
       * Format: date-time
       * @description Date at which this stake was deactivated
       * @example 2023-01-14T01:13:59Z
       */
      deactivated_at?: string | null;
      /**
       * @description Epoch at which this stake was deactivated
       * @example 150
       */
      deactivated_epoch?: number | null;
      /**
       * @description Current balance in Lamport
       * @example 1000000000
       */
      balance?: string;
      /**
       * @description Sum of rewards rewards in Lamport earned by this stake
       * @example 1000000000
       */
      rewards?: string;
      /**
       * @description Net annual percentage yield
       * @example 3.407
       */
      net_apy?: number;
      /**
       * Format: date-time
       * @description Last date this data was updated
       * @example 2023-01-14T01:13:59Z
       */
      updated_at?: string;
    };
    SOLRewardByDay: {
      /**
       * Format: date
       * @description Day for this reward entry
       * @example 2023-01-15
       */
      date: string;
      /**
       * @description Accumulated rewards in Lamport during the day
       * @example 1000
       */
      rewards?: string;
      /**
       * @description Active balance in Lamport after rewards computing
       * @example 1000
       */
      active_balance?: string;
      /**
       * @description Net annual percentage yield
       * @example 3.407
       */
      net_apy?: number;
    };
    SOLRewardByEpoch: {
      /**
       * Format: integer
       * @description Epoch for this reward entry
       * @example 120
       */
      epoch: number;
      /**
       * Format: date-time
       * @description Epoch timestamp for this reward entry
       * @example 2023-01-14T01:13:59Z
       */
      epoch_ts?: string;
      /**
       * @description Accumulated rewards in Lamport during the day
       * @example 1000
       */
      rewards?: string;
      /**
       * @description Active balance in Lamport after rewards computing
       * @example 1000
       */
      active_balance?: string;
      /**
       * @description Net annual percentage yield
       * @example 3.407
       */
      net_apy?: number;
    };
    SOLOperationCreateAccountWithSeed: {
      /**
       * @description Operation type
       * @example create_account_with_seed
       */
      type?: string;
      /**
       * Format: date-time
       * @description Date of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Transaction hash
       * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
       */
      tx_hash?: string;
      /**
       * @description Fee charged to the associated transaction in Lamport
       * @example 1000
       */
      tx_fee?: string;
      /**
       * @description Memo associated with the transaction
       * @example kiln_memo
       */
      tx_memo?: string | null;
      /**
       * @description Block number of the operation
       * @example 1000
       */
      block?: number;
      /**
       * @description Created stake account
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      stake_account?: string;
      /**
       * @description Amount delegated to the new stake account in Lamport
       * @example 1000
       */
      amount?: string;
      /**
       * @description Stake authority
       * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
       */
      stake_authority?: string;
    };
    SOLOperationCreateAccount: {
      /**
       * @description Operation type
       * @example create_account
       */
      type?: string;
      /**
       * Format: date-time
       * @description Date of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Transaction hash
       * @example 8nPu2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie8b7ty2Ni99QoSpZudCBoWXk6d
       */
      tx_hash?: string;
      /**
       * @description Fee charged to the associated transaction in Lamport
       * @example 1000
       */
      tx_fee?: string;
      /**
       * @description Memo associated with the transaction
       * @example kiln_memo
       */
      tx_memo?: string | null;
      /**
       * @description Block number of the operation
       * @example 1000
       */
      block?: number;
      /**
       * @description Created stake account
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      stake_account?: string;
      /**
       * @description Amount delegated to the new stake account in Lamport
       * @example 1000
       */
      amount?: string;
      /**
       * @description Stake authority
       * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
       */
      stake_authority?: string;
    };
    SOLOperationDelegate: {
      /**
       * @description Operation type
       * @example delegate
       */
      type?: string;
      /**
       * Format: date-time
       * @description Date of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Transaction hash
       * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
       */
      tx_hash?: string;
      /**
       * @description Fee charged to the associated transaction in Lamport
       * @example 1000
       */
      tx_fee?: string;
      /**
       * @description Memo associated with the transaction
       * @example kiln_memo
       */
      tx_memo?: string | null;
      /**
       * @description Block number of the operation
       * @example 1000
       */
      block?: number;
      /**
       * @description Delegated stake account
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      stake_account?: string;
      /**
       * @description Vote account to which this stake was re-delegated.
       * @example 6hNweZvzTudTuprZrAXb1A9grKvVG6xgjyvdJUqAMk78
       */
      vote_account?: string;
      /**
       * @description Stake authority
       * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
       */
      stake_authority?: string;
    };
    SOLOperationDeactivate: {
      /**
       * @description Operation type
       * @example deactivate
       */
      type?: string;
      /**
       * Format: date-time
       * @description Date of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Transaction hash
       * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
       */
      tx_hash?: string;
      /**
       * @description Fee charged to the associated transaction in Lamport
       * @example 1000
       */
      tx_fee?: string;
      /**
       * @description Memo associated with the transaction
       * @example kiln_memo
       */
      tx_memo?: string | null;
      /**
       * @description Block number of the operation
       * @example 1000
       */
      block?: number;
      /**
       * @description Deactivated stake account
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      stake_account?: string;
      /**
       * @description Stake authority
       * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
       */
      stake_authority?: string;
    };
    SOLOperationRedelegate: {
      /**
       * @description Operation type
       * @example redelegate
       */
      type?: string;
      /**
       * Format: date-time
       * @description Date of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Transaction hash
       * @example 8nPu8b7ty2Ni99QoSpZudCBoWXk6d
       */
      tx_hash?: string;
      /**
       * @description Fee charged to the associated transaction in Lamport
       * @example 1000
       */
      tx_fee?: string;
      /**
       * @description Memo associated with the transaction
       * @example kiln_memo
       */
      tx_memo?: string | null;
      /**
       * @description Block number of the operation
       * @example 1000
       */
      block?: number;
      /**
       * @description Source of the re-delegation
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      stake_account?: string;
      /**
       * @description Destination of the re-delegation
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      new_stake_account?: string;
      /**
       * @description Vote account to which this stake was re-delegated.
       * @example 6hNweZvzTudTuprZrAXb1A9grKvVG6xgjyvdJUqAMk78
       */
      vote_account?: string;
      /**
       * @description Stake authority
       * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
       */
      stake_authority?: string;
    };
    SOLOperationSplit: {
      /**
       * @description Operation type
       * @example split
       */
      type?: string;
      /**
       * Format: date-time
       * @description Date of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Transaction hash
       * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
       */
      tx_hash?: string;
      /**
       * @description Fee charged to the associated transaction in Lamport
       * @example 1000
       */
      tx_fee?: string;
      /**
       * @description Memo associated with the transaction
       * @example kiln_memo
       */
      tx_memo?: string | null;
      /**
       * @description Block number of the operation
       * @example 1000
       */
      block?: number;
      /**
       * @description Stake account split
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      stake_account?: string | null;
      /**
       * @description New stake account which received the split-off amount.
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      new_stake_account?: string;
      /**
       * @description Amount of SOL in Lamport
       * @example 1000000000
       */
      amount?: string;
      /**
       * @description Stake authority
       * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
       */
      stake_authority?: string;
    };
    SOLOperationWithdraw: {
      /**
       * @description Operation type
       * @example withdraw
       */
      type?: string;
      /**
       * Format: date-time
       * @description Date of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Transaction hash
       * @example 2cHnbnyJnP6vffL3iR2pN8va6fxXWEdnYAr9nwM7d3VowDXSxw3B541DR294fHgomK81SQdSHdskhKUCWUKQPHie
       */
      tx_hash?: string;
      /**
       * @description Fee charged to the associated transaction in Lamport
       * @example 1000
       */
      tx_fee?: string;
      /**
       * @description Memo associated with the transaction
       * @example kiln_memo
       */
      tx_memo?: string | null;
      /**
       * @description Block number of the operation
       * @example 1000
       */
      block?: number;
      /**
       * @description Source stake account for the merge and drained.
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      stake_account?: string;
      /**
       * @description Recipient account
       * @example 4qdoP4oJgKjVtHTE9t9kV1jKdF41uHQ5Q5e1G5VjRLCk
       */
      destination_account?: string;
      /**
       * @description Portion of the stake account balance withdrawn
       * @example 1000000000
       */
      amount?: string;
      /**
       * @description Withdraw authority
       * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
       */
      stake_authority?: string;
    };
    SOLOperationMerge: {
      /**
       * @description Operation type
       * @example merge
       */
      type?: string;
      /**
       * Format: date-time
       * @description Date of the operation
       * @example 2023-01-14T01:13:59Z
       */
      time?: string;
      /**
       * @description Transaction hash
       * @example 8nPu8b7ty2Ni99QoSpZudCBoWXk6d
       */
      tx_hash?: string;
      /**
       * @description Fee charged to the associated transaction in Lamport
       * @example 1000
       */
      tx_fee?: string;
      /**
       * @description Memo associated with the transaction
       * @example kiln_memo
       */
      tx_memo?: string | null;
      /**
       * @description Block number of the operation
       * @example 1000
       */
      block?: number;
      /**
       * @description Destination stake account for the merge
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      stake_account?: string;
      /**
       * @description Source stake account for the merge and drained.
       * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
       */
      source_stake_account?: string;
      /**
       * @description Transaction signer
       * @example 4wdr76KJTFgH68YtGddmnF45WdD8LMv9eLsdf
       */
      stake_authority?: string;
    };
    SOLNetworkStats: {
      /**
       * @description Gross annual percentage yield
       * @example 4.5
       */
      network_gross_apy?: number;
      /**
       * @description Supply of Solana currently staked
       * @example 12.4
       */
      supply_staked_percent?: number;
      /**
       * @description Number of active stakes
       * @example 402
       */
      nb_validators?: number;
    };
    SOLPostStakesPayload: {
      stakes: ({
          /**
           * @description Stake account to be delegated
           * @example 3sfokk2DFsd88ujd8sfa9slsdf99kjnFJksdf
           */
          stakeAccount?: string | null;
          /**
           * @description Balance to delegate in SOL
           * @example 1000000
           */
          balance?: number;
        })[];
      /**
       * @description Kiln Account ID
       * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
       */
      account_id: string;
    };
    SOLStakeTxPayload: {
      /**
       * @description Kiln Account ID
       * @example d3f1b917-72b1-4982-a4dd-93fce579a708
       */
      account_id: string;
      /**
       * @description Wallet address
       * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
       */
      wallet: string;
      /**
       * @description Amount in lamports (minimum value must be 10000001)
       * @example 1000000000000000
       */
      amount_lamports: string;
      /**
       * @description Vote account address
       * @example 5pPRHniefFjkiaArbGX3Y8NUysJmQ9tMZg3FrFGwHzSm
       */
      vote_account_address: string;
      /**
       * @description Custom message to send as a memo in the transaction
       * @example custom message
       */
      memo?: string;
    };
    SOLStakeTx: {
      /**
       * @description Hex encoded transaction data that need to be covered by signatures
       * @example 0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
       */
      unsigned_tx_hash?: string;
      /**
       * @description Hex encoded full transaction
       * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
       */
      unsigned_tx_serialized?: string;
      /**
       * @description Transaction message containing transaction instructions. Object shape can be found [here](https://github.com/solana-labs/solana-web3.js/blob/master/packages/library-legacy/src/message/legacy.ts#L59)
       * @example {
       *   "header": {
       *     "numRequiredSignatures": 3,
       *     "numReadonlySignedAccounts": 1,
       *     "numReadonlyUnsignedAccounts": 8
       *   },
       *   "accountKeys": [
       *     "4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9",
       *     "2sAwSXUrNW9PfaX6joGy62QAfmhHGnxpM7CYGNF7qdPX",
       *     "6WwYZH8zdqF7kELtRfo1yAnvD1wvXwTg4m1jBhUCqC68",
       *     "HoAGnvTdp4Qgrq3NWtNQFS6FixasBhLqui23Seq7riSw",
       *     "11111111111111111111111111111111",
       *     "5pPRHniefFjkiaArbGX3Y8NUysJmQ9tMZg3FrFGwHzSm",
       *     "Stake11111111111111111111111111111111111111",
       *     "StakeConfig11111111111111111111111111111111",
       *     "SysvarC1ock11111111111111111111111111111111",
       *     "SysvarRecentB1ockHashes11111111111111111111",
       *     "SysvarRent111111111111111111111111111111111",
       *     "SysvarStakeHistory1111111111111111111111111"
       *   ],
       *   "recentBlockhash": "HCAcHiKdfbnfZk6rgnrWxeCBxavYxcWWo7JLsQqwDquU",
       *   "instructions": [
       *     {
       *       "programIdIndex": 4,
       *       "accounts": [
       *         3,
       *         9,
       *         2
       *       ],
       *       "data": "6vx8P"
       *     },
       *     {
       *       "programIdIndex": 4,
       *       "accounts": [
       *         0,
       *         1
       *       ],
       *       "data": "11111255HrbrzNKE34jJbWojuhKCCFF5BqruMbtEe7CY3fPCMjUHYn7uEDqFavZELT1boD"
       *     },
       *     {
       *       "programIdIndex": 6,
       *       "accounts": [
       *         1,
       *         10
       *       ],
       *       "data": "1111BNVhr29wy4CUDfmP3ysWa9GUZMwYaMaAp9JVWCAzhqZ78HhuLB7fgzVCHGpmMQg4sJMrzXVvT3BxhUBDvroCMCJ5sKhVwNWL2phXwqXEH6mKiVgsJwPG3iKFVxiQoPLBXFx7Vv9USNmuAMcTWz6tvYb2w"
       *     },
       *     {
       *       "programIdIndex": 6,
       *       "accounts": [
       *         1,
       *         5,
       *         8,
       *         11,
       *         7,
       *         0
       *       ],
       *       "data": "3xyZh"
       *     }
       *   ],
       *   "indexToProgramIds": {}
       * }
       */
      unsigned_tx?: Record<string, never>;
    };
    SOLDeactivateStakeTxPayload: {
      /**
       * @description Stake account address
       * @example 3M7sFDMdUxfNNSmKk2ZmDKgKJFzuLvxpuXKDTLRGXpcK
       */
      stake_account: string;
      /**
       * @description Wallet address
       * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
       */
      wallet: string;
    };
    SOLWithdrawStakeTxPayload: {
      /**
       * @description Stake account address
       * @example 3M7sFDMdUxfNNSmKk2ZmDKgKJFzuLvxpuXKDTLRGXpcK
       */
      stake_account: string;
      /**
       * @description Wallet address
       * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
       */
      wallet: string;
      /**
       * @description Amount in lamports
       * @example 1000000000000000
       */
      amount_lamports?: string;
    };
    SOLMergeStakesTxPayload: {
      /**
       * @description Stake account address
       * @example HQQkoFXHz1XemQHFhC3mN1CGdfH8Pokw2DfFUmwZCRWb
       */
      stake_account_source: string;
      /**
       * @description Stake account address
       * @example GyPnKF88P8c3jESicELWLrxAmeF9PoaKzqYGREDuEAMx
       */
      stake_account_destination: string;
      /**
       * @description Wallet address
       * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
       */
      wallet: string;
    };
    SOLSplitStakeTxPayload: {
      /**
       * @description Kiln Account ID
       * @example d3f1b917-72b1-4982-a4dd-93fce579a708
       */
      account_id: string;
      /**
       * @description Stake account address
       * @example GyPnKF88P8c3jESicELWLrxAmeF9PoaKzqYGREDuEAMx
       */
      stake_account: string;
      /**
       * @description Wallet address
       * @example 4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9
       */
      wallet: string;
      /**
       * @description Amount in lamports
       * @example 200000000
       */
      amount_lamports: string;
    };
    SOLPrepareTxPayload: {
      /**
       * @description Hex encoded unsigned transaction
       * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
       */
      unsigned_tx_serialized: string;
      /** @description Hex encoded signatures */
      signatures: string[];
    };
    SOLPreparedTx: {
      /**
       * @description Hex encoded signed transaction
       * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
       */
      signed_tx_serialized?: string;
    };
    SOLBroadcastTxPayload: {
      /**
       * @description Hex encoded signed transaction
       * @example 0300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000063b2b5ef76d483b695bc3b954d9a372ca5f744e00279c8578bc4268d570b701a037fac575ae16bb3ba5702b8d5bd9930953453e2d628368f83a11ab5896d20bbcae0b4a119860afd99da20f3462ba15d8bd1528d73724b83e8cc4cee00787df28a181783c264113ef1870bae5a90987fc5cfcdffaddf23c7dcfd7585c13d10b0301080c373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e1bb5f70b4d3ae65feb6d20587f62ccc8d5e720e99abe3d4415972bbf74a8a88a51f5f3871e65b84cc393458d0f23a413184cf2bb7093ae4e2c99d55b39a575c5f98e3135fcb53e71e6fafcb4da3a3cc36af1c76a1a7e72aa12eae1346d724c6c00000000000000000000000000000000000000000000000000000000000000004792650d1e9a4fe99721617c7d47c8712c14c20a76bf043368c6528c9090531a06a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc00000000006a1d817a502050b680791e6ce6db88e1e5b7150f61fc6790a4eb4d10000000006a7d51718c774c928566398691d5eb68b5eb8a39b4b6d5c73555b210000000006a7d517192c568ee08a845f73d29788cf035c3145b21ab344d8062ea940000006a7d517192c5c51218cc94c3d4af17f58daee089ba1fd44e3dbd98a0000000006a7d517193584d0feed9bb3431d13206be544281b57b8566cc5375ff4000000f0973e76495f3ffc65798a529de5cba4ec7f47f17669c9fa256923f099a1cda304040303090204040000000402000134000000000080c6a47e8d0300c80000000000000006a1d8179137542a983437bdfe2a7ab2557f535c8a78722b68a49dc0000000000602010a7400000000373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e373c6f8e84c6822a9f87035f65cccf899eef3fcdee61077041a93e1805bab24e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006060105080b07000402000000
       */
      tx_serialized: string;
    };
    SOLBroadcastTx: {
      /**
       * @description Hash of the transaction
       * @example sV6dgQyxByL66t9uTPmffitncWNmnkR8oEC1gQ29jPrKFHm9TkMGvS3TgcQeNz9pSN7913aPXe6MMHFS4xqTafL
       */
      tx_hash?: string;
    };
    SOLTxStatus: {
      /**
       * @description Transaction status
       * @example success
       */
      status?: string;
      /**
       * @description Transaction receipt. Object shape can be found [here](https://github.com/solana-labs/solana-web3.js/blob/dfc6d588b4b7c880d74dc727399ee8a84979b480/packages/library-legacy/src/connection.ts#L1071)
       * @example {
       *   "blockTime": 1676916194,
       *   "meta": {
       *     "computeUnitsConsumed": 0,
       *     "err": null,
       *     "fee": 15000,
       *     "innerInstructions": [],
       *     "loadedAddresses": {
       *       "readonly": [],
       *       "writable": []
       *     },
       *     "logMessages": [
       *       "Program 11111111111111111111111111111111 invoke [1]",
       *       "Program 11111111111111111111111111111111 success",
       *       "Program 11111111111111111111111111111111 invoke [1]",
       *       "Program 11111111111111111111111111111111 success",
       *       "Program Stake11111111111111111111111111111111111111 invoke [1]",
       *       "Program Stake11111111111111111111111111111111111111 success",
       *       "Program Stake11111111111111111111111111111111111111 invoke [1]",
       *       "Program Stake11111111111111111111111111111111111111 success"
       *     ],
       *     "postBalances": [
       *       1587335720,
       *       200000000,
       *       1979975000,
       *       10000000,
       *       1,
       *       7292994607,
       *       1,
       *       960480,
       *       1169280,
       *       42706560,
       *       1009200,
       *       114979200
       *     ],
       *     "postTokenBalances": [],
       *     "preBalances": [
       *       1787350720,
       *       0,
       *       1979975000,
       *       10000000,
       *       1,
       *       7292994607,
       *       1,
       *       960480,
       *       1169280,
       *       42706560,
       *       1009200,
       *       114979200
       *     ],
       *     "preTokenBalances": [],
       *     "rewards": [],
       *     "status": {
       *       "Ok": null
       *     }
       *   },
       *   "slot": 197065694,
       *   "transaction": {
       *     "message": {
       *       "header": {
       *         "numReadonlySignedAccounts": 1,
       *         "numReadonlyUnsignedAccounts": 8,
       *         "numRequiredSignatures": 3
       *       },
       *       "accountKeys": [
       *         "4icse2mPXNgyxxn11tVM7sTnSqDqwJSEzdnaCQnRzvA9",
       *         "8qcpEjkWRi7LuZL4oQARDNTMVUwLQyakuno2syEMLsBi",
       *         "6WwYZH8zdqF7kELtRfo1yAnvD1wvXwTg4m1jBhUCqC68",
       *         "HoAGnvTdp4Qgrq3NWtNQFS6FixasBhLqui23Seq7riSw",
       *         "11111111111111111111111111111111",
       *         "FwR3PbjS5iyqzLiLugrBqKSa5EKZ4vK9SKs7eQXtT59f",
       *         "Stake11111111111111111111111111111111111111",
       *         "StakeConfig11111111111111111111111111111111",
       *         "SysvarC1ock11111111111111111111111111111111",
       *         "SysvarRecentB1ockHashes11111111111111111111",
       *         "SysvarRent111111111111111111111111111111111",
       *         "SysvarStakeHistory1111111111111111111111111"
       *       ],
       *       "recentBlockhash": "4emvYWMe99WbtKFHmtv5gEUYi9HfVnmQyf5Y7ccCEpWR",
       *       "instructions": [
       *         {
       *           "accounts": [
       *             3,
       *             9,
       *             2
       *           ],
       *           "data": "6vx8P",
       *           "programIdIndex": 4
       *         },
       *         {
       *           "accounts": [
       *             0,
       *             1
       *           ],
       *           "data": "111112cxUqMWZDxCrGjkHwTWjy7bQNEqgy3xB2LZ8vt9NjVisJzdYK3W8eRceiR2k9CjMy",
       *           "programIdIndex": 4
       *         },
       *         {
       *           "accounts": [
       *             1,
       *             10
       *           ],
       *           "data": "1111BNVhr29wy4CUDfmP3ysWa9GUZMwYaMaAp9JVWCAzhqZ78HhuLB7fgzVCHGpmMQg4sJMrzXVvT3BxhUBDvroCMCJ5sKhVwNWL2phXwqXEH6mKiVgsJwPG3iKFVxiQoPLBXFx7Vv9USNmuAMcTWz6tvYb2w",
       *           "programIdIndex": 6
       *         },
       *         {
       *           "accounts": [
       *             1,
       *             5,
       *             8,
       *             11,
       *             7,
       *             0
       *           ],
       *           "data": "3xyZh",
       *           "programIdIndex": 6
       *         }
       *       ],
       *       "indexToProgramIds": {}
       *     },
       *     "signatures": [
       *       "569uGMNQR4vVeukdSTmLtrzs5ZSiAFTk3tPTBavJjZ1H7b3be2EB8ZjRcfhTA6gBApien2tbJgKYayDVtRKFRfUu",
       *       "3hSgNRnKero2XogfU6Dk3jDXrEMmknNaoPbW4dJ6BHCkDUV5J5rr5iRRdaAtoVLvat7QMox7qpanMu6fqUAUvs3w",
       *       "5djumEdbCJEAPxJk2r9FybpDLnSy4uazGbgP3EmtQrMQMW4edQrhb1nYK3aJtgf5svMtSXSgKoFho4tUxVAbZSUn"
       *     ]
       *   }
       * }
       */
      receipt?: Record<string, never>;
    };
    ATOMStake: {
      /**
       * @description Public key of the validator
       * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2
       */
      validator_address?: string;
      /**
       * @description Public key of the delegator
       * @example cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
       */
      delegator_address?: string;
      /**
       * Format: date-time
       * @description Date of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
       * @example 2023-06-16T03:13:23.058547Z
       */
      delegated_at?: string | null;
      /**
       * Format: number
       * @description Block of first delegation ever for the stake. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
       * @example 15739267
       */
      delegated_block?: number | null;
      /**
       * Format: date-time
       * @description Date of undelegation for the stake
       * @example 2023-07-14T03:56:13.561156Z
       */
      undelegated_at?: string | null;
      /**
       * Format: number
       * @description Block of undelegation for the stake
       * @example 16126416
       */
      undelegated_block?: number | null;
      /**
       * @description Total rewards accumulated by this stake since its first ever delegation in uATOM. Includes currently available rewards not yet withdrawn.
       * @example 735573808534727891000000
       */
      rewards?: string | null;
      /**
       * @description Available rewards in uATOM that can be withdrawn from this stake
       * @example 36748808534727891000000
       */
      available_rewards?: string | null;
      /**
       * @description Staked balance on this stake in uATOM
       * @example 6300000000000000000000000
       */
      balance?: string | null;
      /**
       * @description Net annual percentage yield. Unavailable for stakes older than [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary).
       * @example 5.76
       */
      net_apy?: number | null;
      /**
       * @description State of the Atom stake
       * @example active
       */
      state?: string;
      /**
       * Format: date-time
       * @description Last date this data was updated
       * @example 2023-01-14T01:13:59Z
       */
      updated_at?: string;
    };
    PostATOMStakesPayload: {
      stakes: {
          /**
           * @description Stake id {validator_address}_{delegator_address}
           * @example cosmosvaloper1uxlf7mvr8nep3gm7udf2u9remms2jyjqvwdul2_cosmos1mfdn23y2ydnp6j3l3f8rw6r2gzazrmprgxn5xl
           */
          stakeId?: string;
          /**
           * @description Balance staked in uATOM
           * @example 1000000
           */
          balance?: number;
        }[];
      /**
       * @description Kiln Account ID
       * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
       */
      account_id: string;
    };
    ATOMReward: {
      /**
       * Format: date
       * @description Day for this reward entry
       * @example 2023-01-15
       */
      date?: string;
      /**
       * @description Accumulated rewards in uATOM during the day
       * @example 3575891083876864200000
       */
      rewards?: string | null;
      /**
       * @description Staked balance in uATOM at the end of the day
       * @example 6300000000000000000000000
       */
      balance?: string | null;
      /**
       * @description Net annual percentage yield
       * @example 20.76
       */
      net_apy?: number | null;
    };
    ATOMNetworkStats: {
      /**
       * @description Number of validators in the network
       * @example 100
       */
      nb_validators?: number;
      /**
       * @description Gross annual percentage yield
       * @example 4.5
       */
      network_gross_apy?: number;
      /**
       * @description Supply of ATOM currently staked
       * @example 12.4
       */
      supply_staked_percent?: number;
      /**
       * @description Price of ATOM in USD
       * @example 10.53
       */
      atom_price_usd?: number;
      /**
       * Format: date-time
       * @description Last date this data was updated
       * @example 2023-01-14T01:13:59Z
       */
      updated_at?: string;
    };
    ATOMCraftStakeTxPayload: {
      /**
       * Format: uuid
       * @description Kiln Account ID to stake into
       * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
       */
      account_id: string;
      /**
       * @description Wallet compressed or uncompressed public key, this is different than the wallet address
       * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
       */
      pubkey: string;
      /**
       * @description Validator address
       * @example cosmosvaloper16ys0eg935mkqpkydkgfcj9age2au8l96naere9
       */
      validator: string;
      /**
       * @description Amount to stake in uATOM
       * @example 1000000000000000000000000
       */
      amount_uatom: string;
    };
    ATOMCraftWithdrawRewardsTxPayload: {
      /**
       * @description Wallet compressed public key, this is different than the wallet address
       * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
       */
      pubkey: string;
      /**
       * @description Validator address
       * @example cosmosvaloper16ys0eg935mkqpkydkgfcj9age2au8l96naere9
       */
      validator: string;
    };
    ATOMCraftUnstakeTxPayload: {
      /**
       * @description Wallet compressed public key, this is different than the wallet address
       * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
       */
      pubkey: string;
      /**
       * @description Validator address
       * @example cosmosvaloper16ys0eg935mkqpkydkgfcj9age2au8l96naere9
       */
      validator: string;
      /**
       * @description Amount to unstake in uATOM. Omit to unstake all the delegated amount
       * @example 1000000000000000000000000
       */
      amount_uatom?: string;
    };
    ATOMPrepareTxPayload: {
      /**
       * @description Wallet compressed public key, this is different than the wallet address
       * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
       */
      pubkey: string;
      /**
       * @description Transaction body serialized in hex
       * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
       */
      tx_body: string;
      /**
       * @description Transaction auth info serialized in hex
       * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
       */
      tx_auth_info: string;
      /**
       * @description Transaction signature serialized in hex
       * @example 191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
       */
      signature: string;
    };
    ATOMBroadcastTxPayload: {
      /**
       * @description Signed transaction serialized in hex
       * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
       */
      tx_serialized: string;
    };
    ATOMTxStatus: {
      /**
       * @description Transaction status
       * @example success
       */
      status?: string;
      /**
       * @description Transaction receipt. Only present if status is success. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/e8e65aa0c145616ccb58625c32bffe08b46ff574/packages/stargate/src/stargateclient.ts#L67)
       * @example {
       *   "height": 16007296,
       *   "txIndex": 0,
       *   "hash": "2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB",
       *   "code": 0,
       *   "events": [
       *     {
       *       "type": "coin_spent",
       *       "attributes": [
       *         {
       *           "key": "spender",
       *           "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
       *         },
       *         {
       *           "key": "amount",
       *           "value": "5000uatom"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "coin_received",
       *       "attributes": [
       *         {
       *           "key": "receiver",
       *           "value": "cosmos17xpfvakm2amg962yls6f84z3kell8c5lserqta"
       *         },
       *         {
       *           "key": "amount",
       *           "value": "5000uatom"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "transfer",
       *       "attributes": [
       *         {
       *           "key": "recipient",
       *           "value": "cosmos17xpfvakm2amg962yls6f84z3kell8c5lserqta"
       *         },
       *         {
       *           "key": "sender",
       *           "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
       *         },
       *         {
       *           "key": "amount",
       *           "value": "5000uatom"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "message",
       *       "attributes": [
       *         {
       *           "key": "sender",
       *           "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "tx",
       *       "attributes": [
       *         {
       *           "key": "fee",
       *           "value": "5000uatom"
       *         },
       *         {
       *           "key": "fee_payer",
       *           "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "tx",
       *       "attributes": [
       *         {
       *           "key": "acc_seq",
       *           "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev/33"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "tx",
       *       "attributes": [
       *         {
       *           "key": "signature",
       *           "value": "GR+HpU3Or7arml8RKhNETKN+SaAp5TG7ITAf1y6dOQMEx2PMpal2CmMdyFcF3WsItQ9f/31d6Nc7LOvR9MO2oA=="
       *         }
       *       ]
       *     },
       *     {
       *       "type": "message",
       *       "attributes": [
       *         {
       *           "key": "action",
       *           "value": "/cosmos.staking.v1beta1.MsgDelegate"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "coin_spent",
       *       "attributes": [
       *         {
       *           "key": "spender",
       *           "value": "cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
       *         },
       *         {
       *           "key": "amount",
       *           "value": "5uatom"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "coin_received",
       *       "attributes": [
       *         {
       *           "key": "receiver",
       *           "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
       *         },
       *         {
       *           "key": "amount",
       *           "value": "5uatom"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "transfer",
       *       "attributes": [
       *         {
       *           "key": "recipient",
       *           "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
       *         },
       *         {
       *           "key": "sender",
       *           "value": "cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
       *         },
       *         {
       *           "key": "amount",
       *           "value": "5uatom"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "message",
       *       "attributes": [
       *         {
       *           "key": "sender",
       *           "value": "cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "withdraw_rewards",
       *       "attributes": [
       *         {
       *           "key": "amount",
       *           "value": "5uatom"
       *         },
       *         {
       *           "key": "validator",
       *           "value": "cosmosvaloper16ys0eg935mkqpkydkgfcj9age2au8l96naere9"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "coin_spent",
       *       "attributes": [
       *         {
       *           "key": "spender",
       *           "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
       *         },
       *         {
       *           "key": "amount",
       *           "value": "100000uatom"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "coin_received",
       *       "attributes": [
       *         {
       *           "key": "receiver",
       *           "value": "cosmos1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh"
       *         },
       *         {
       *           "key": "amount",
       *           "value": "100000uatom"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "delegate",
       *       "attributes": [
       *         {
       *           "key": "validator",
       *           "value": "cosmosvaloper16ys0eg935mkqpkydkgfcj9age2au8l96naere9"
       *         },
       *         {
       *           "key": "amount",
       *           "value": "100000uatom"
       *         },
       *         {
       *           "key": "new_shares",
       *           "value": "100000.000000000000000000"
       *         }
       *       ]
       *     },
       *     {
       *       "type": "message",
       *       "attributes": [
       *         {
       *           "key": "module",
       *           "value": "staking"
       *         },
       *         {
       *           "key": "sender",
       *           "value": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev"
       *         }
       *       ]
       *     }
       *   ],
       *   "rawLog": "[{\"events\":[{\"type\":\"coin_received\",\"attributes\":[{\"key\":\"receiver\",\"value\":\"cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"5uatom\"},{\"key\":\"receiver\",\"value\":\"cosmos1fl48vsnmsdzcv85q5d2q4z5ajdha8yu34mf0eh\"},{\"key\":\"amount\",\"value\":\"100000uatom\"}]},{\"type\":\"coin_spent\",\"attributes\":[{\"key\":\"spender\",\"value\":\"cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5uatom\"},{\"key\":\"spender\",\"value\":\"cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"amount\",\"value\":\"100000uatom\"}]},{\"type\":\"delegate\",\"attributes\":[{\"key\":\"validator\",\"value\":\"cosmosvaloper16ys0eg935mkqpkydkgfcj9age2au8l96naere9\"},{\"key\":\"amount\",\"value\":\"100000uatom\"},{\"key\":\"new_shares\",\"value\":\"100000.000000000000000000\"}]},{\"type\":\"message\",\"attributes\":[{\"key\":\"action\",\"value\":\"/cosmos.staking.v1beta1.MsgDelegate\"},{\"key\":\"sender\",\"value\":\"cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"module\",\"value\":\"staking\"},{\"key\":\"sender\",\"value\":\"cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"}]},{\"type\":\"transfer\",\"attributes\":[{\"key\":\"recipient\",\"value\":\"cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev\"},{\"key\":\"sender\",\"value\":\"cosmos1jv65s3grqf6v6jl3dp4t6c9t9rk99cd88lyufl\"},{\"key\":\"amount\",\"value\":\"5uatom\"}]},{\"type\":\"withdraw_rewards\",\"attributes\":[{\"key\":\"amount\",\"value\":\"5uatom\"},{\"key\":\"validator\",\"value\":\"cosmosvaloper16ys0eg935mkqpkydkgfcj9age2au8l96naere9\"}]}]}]",
       *   "tx": {
       *     "0": 10,
       *     "1": 160,
       *     "2": 1,
       *     "3": 10,
       *     "4": 157,
       *     "5": 1,
       *     "6": 10,
       *     "7": 35,
       *     "8": 47,
       *     "9": 99,
       *     "10": 111,
       *     "11": 115,
       *     "12": 109,
       *     "13": 111,
       *     "14": 115,
       *     "15": 46,
       *     "16": 115,
       *     "17": 116,
       *     "18": 97,
       *     "19": 107,
       *     "20": 105,
       *     "21": 110,
       *     "22": 103,
       *     "23": 46,
       *     "24": 118,
       *     "25": 49,
       *     "26": 98,
       *     "27": 101,
       *     "28": 116,
       *     "29": 97,
       *     "30": 49,
       *     "31": 46,
       *     "32": 77,
       *     "33": 115,
       *     "34": 103,
       *     "35": 68,
       *     "36": 101,
       *     "37": 108,
       *     "38": 101,
       *     "39": 103,
       *     "40": 97,
       *     "41": 116,
       *     "42": 101,
       *     "43": 18,
       *     "44": 118,
       *     "45": 10,
       *     "46": 45,
       *     "47": 99,
       *     "48": 111,
       *     "49": 115,
       *     "50": 109,
       *     "51": 111,
       *     "52": 115,
       *     "53": 49,
       *     "54": 57,
       *     "55": 99,
       *     "56": 57,
       *     "57": 102,
       *     "58": 100,
       *     "59": 104,
       *     "60": 52,
       *     "61": 56,
       *     "62": 56,
       *     "63": 118,
       *     "64": 113,
       *     "65": 106,
       *     "66": 99,
       *     "67": 108,
       *     "68": 108,
       *     "69": 116,
       *     "70": 119,
       *     "71": 112,
       *     "72": 54,
       *     "73": 56,
       *     "74": 106,
       *     "75": 109,
       *     "76": 53,
       *     "77": 48,
       *     "78": 121,
       *     "79": 100,
       *     "80": 119,
       *     "81": 121,
       *     "82": 104,
       *     "83": 51,
       *     "84": 54,
       *     "85": 106,
       *     "86": 113,
       *     "87": 101,
       *     "88": 97,
       *     "89": 116,
       *     "90": 101,
       *     "91": 118,
       *     "92": 18,
       *     "93": 52,
       *     "94": 99,
       *     "95": 111,
       *     "96": 115,
       *     "97": 109,
       *     "98": 111,
       *     "99": 115,
       *     "100": 118,
       *     "101": 97,
       *     "102": 108,
       *     "103": 111,
       *     "104": 112,
       *     "105": 101,
       *     "106": 114,
       *     "107": 49,
       *     "108": 54,
       *     "109": 121,
       *     "110": 115,
       *     "111": 48,
       *     "112": 101,
       *     "113": 103,
       *     "114": 57,
       *     "115": 51,
       *     "116": 53,
       *     "117": 109,
       *     "118": 107,
       *     "119": 113,
       *     "120": 112,
       *     "121": 107,
       *     "122": 121,
       *     "123": 100,
       *     "124": 107,
       *     "125": 103,
       *     "126": 102,
       *     "127": 99,
       *     "128": 106,
       *     "129": 57,
       *     "130": 97,
       *     "131": 103,
       *     "132": 101,
       *     "133": 50,
       *     "134": 97,
       *     "135": 117,
       *     "136": 56,
       *     "137": 108,
       *     "138": 57,
       *     "139": 54,
       *     "140": 110,
       *     "141": 97,
       *     "142": 101,
       *     "143": 114,
       *     "144": 101,
       *     "145": 57,
       *     "146": 26,
       *     "147": 15,
       *     "148": 10,
       *     "149": 5,
       *     "150": 117,
       *     "151": 97,
       *     "152": 116,
       *     "153": 111,
       *     "154": 109,
       *     "155": 18,
       *     "156": 6,
       *     "157": 49,
       *     "158": 48,
       *     "159": 48,
       *     "160": 48,
       *     "161": 48,
       *     "162": 48,
       *     "163": 18,
       *     "164": 103,
       *     "165": 10,
       *     "166": 80,
       *     "167": 10,
       *     "168": 70,
       *     "169": 10,
       *     "170": 31,
       *     "171": 47,
       *     "172": 99,
       *     "173": 111,
       *     "174": 115,
       *     "175": 109,
       *     "176": 111,
       *     "177": 115,
       *     "178": 46,
       *     "179": 99,
       *     "180": 114,
       *     "181": 121,
       *     "182": 112,
       *     "183": 116,
       *     "184": 111,
       *     "185": 46,
       *     "186": 115,
       *     "187": 101,
       *     "188": 99,
       *     "189": 112,
       *     "190": 50,
       *     "191": 53,
       *     "192": 54,
       *     "193": 107,
       *     "194": 49,
       *     "195": 46,
       *     "196": 80,
       *     "197": 117,
       *     "198": 98,
       *     "199": 75,
       *     "200": 101,
       *     "201": 121,
       *     "202": 18,
       *     "203": 35,
       *     "204": 10,
       *     "205": 33,
       *     "206": 3,
       *     "207": 156,
       *     "208": 228,
       *     "209": 123,
       *     "210": 42,
       *     "211": 129,
       *     "212": 61,
       *     "213": 19,
       *     "214": 135,
       *     "215": 97,
       *     "216": 49,
       *     "217": 169,
       *     "218": 195,
       *     "219": 190,
       *     "220": 119,
       *     "221": 232,
       *     "222": 196,
       *     "223": 175,
       *     "224": 164,
       *     "225": 158,
       *     "226": 148,
       *     "227": 135,
       *     "228": 68,
       *     "229": 171,
       *     "230": 190,
       *     "231": 225,
       *     "232": 31,
       *     "233": 147,
       *     "234": 158,
       *     "235": 42,
       *     "236": 66,
       *     "237": 15,
       *     "238": 70,
       *     "239": 18,
       *     "240": 4,
       *     "241": 10,
       *     "242": 2,
       *     "243": 8,
       *     "244": 1,
       *     "245": 24,
       *     "246": 33,
       *     "247": 18,
       *     "248": 19,
       *     "249": 10,
       *     "250": 13,
       *     "251": 10,
       *     "252": 5,
       *     "253": 117,
       *     "254": 97,
       *     "255": 116,
       *     "256": 111,
       *     "257": 109,
       *     "258": 18,
       *     "259": 4,
       *     "260": 53,
       *     "261": 48,
       *     "262": 48,
       *     "263": 48,
       *     "264": 16,
       *     "265": 224,
       *     "266": 167,
       *     "267": 18,
       *     "268": 26,
       *     "269": 64,
       *     "270": 25,
       *     "271": 31,
       *     "272": 135,
       *     "273": 165,
       *     "274": 77,
       *     "275": 206,
       *     "276": 175,
       *     "277": 182,
       *     "278": 171,
       *     "279": 154,
       *     "280": 95,
       *     "281": 17,
       *     "282": 42,
       *     "283": 19,
       *     "284": 68,
       *     "285": 76,
       *     "286": 163,
       *     "287": 126,
       *     "288": 73,
       *     "289": 160,
       *     "290": 41,
       *     "291": 229,
       *     "292": 49,
       *     "293": 187,
       *     "294": 33,
       *     "295": 48,
       *     "296": 31,
       *     "297": 215,
       *     "298": 46,
       *     "299": 157,
       *     "300": 57,
       *     "301": 3,
       *     "302": 4,
       *     "303": 199,
       *     "304": 99,
       *     "305": 204,
       *     "306": 165,
       *     "307": 169,
       *     "308": 118,
       *     "309": 10,
       *     "310": 99,
       *     "311": 29,
       *     "312": 200,
       *     "313": 87,
       *     "314": 5,
       *     "315": 221,
       *     "316": 107,
       *     "317": 8,
       *     "318": 181,
       *     "319": 15,
       *     "320": 95,
       *     "321": 255,
       *     "322": 125,
       *     "323": 93,
       *     "324": 232,
       *     "325": 215,
       *     "326": 59,
       *     "327": 44,
       *     "328": 235,
       *     "329": 209,
       *     "330": 244,
       *     "331": 195,
       *     "332": 182,
       *     "333": 160
       *   },
       *   "gasUsed": 167798,
       *   "gasWanted": 300000
       * }
       */
      receipt?: Record<string, never>;
    };
    ATOMUnsignedTx: {
      /**
       * @description Hash of the unsigned transaction
       * @example b6ce1c8185416ce7d42a8c39566a9a2b6b2361a55c04a1dba3dd7445a0e1e364
       */
      unsigned_tx_hash?: string;
      /**
       * @description Transaction body serialized in hex
       * @example 0a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d120731303030303030
       */
      tx_body?: string;
      /**
       * @description Transaction auth info serialized in hex
       * @example 0a2c0a2a0a28636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a716561746576120a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e6165726539
       */
      tx_auth_info?: string;
      /**
       * @description Wallet compressed public key, this is different than the wallet address
       * @example 039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f46
       */
      pubkey?: string;
      /**
       * @description Message included in the transaction
       * @example {
       *   "typeUrl": "/cosmos.staking.v1beta1.MsgDelegate",
       *   "value": {
       *     "delegatorAddress": "cosmos19c9fdh488vqjclltwp68jm50ydwyh36jqeatev",
       *     "validatorAddress": "cosmosvaloper16ys0eg935mkqpkydkgfcj9age2au8l96naere9",
       *     "amount": {
       *       "denom": "uatom",
       *       "amount": "1000000"
       *     }
       *   }
       * }
       */
      message?: Record<string, never>;
      /**
       * @description Fee included in the transaction. Object shape can be found [here](https://github.com/cosmos/cosmjs/blob/72da7971ee4fd77fec1bfef2ec1ba4f14f8c319d/packages/amino/src/signdoc.ts#L12)
       * @example {
       *   "amount": [
       *     {
       *       "denom": "uatom",
       *       "amount": "5000"
       *     }
       *   ],
       *   "gas": "200000"
       * }
       */
      fee?: Record<string, never>;
    };
    ATOMSignedTx: {
      /**
       * @description Serialized signed transaction in hex
       * @example 0aa1010a9e010a232f636f736d6f732e7374616b696e672e763162657461312e4d736744656c656761746512770a2d636f736d6f733139633966646834383876716a636c6c74777036386a6d3530796477796833366a7165617465761234636f736d6f7376616c6f706572313679733065673933356d6b71706b79646b6766636a39616765326175386c39366e61657265391a100a057561746f6d12073130303030303012670a500a460a1f2f636f736d6f732e63727970746f2e736563703235366b312e5075624b657912230a21039ce47b2a813d13876131a9c3be77e8c4afa49e948744abbee11f939e2a420f4612040a020801182012130a0d0a057561746f6d12043530303010e0a7121a40191f87a54dceafb6ab9a5f112a13444ca37e49a029e531bb21301fd72e9d390304c763cca5a9760a631dc85705dd6b08b50f5fff7d5de8d73b2cebd1f4c3b6a0
       */
      signed_tx_serialized?: string;
    };
    ATOMTxHash: {
      /**
       * @description Hash of the transaction
       * @example 2B4F732E12D5D5AF1F907AD03B199167A718EDC6201DE5713143AB80990420CB
       */
      tx_hash?: string;
    };
    AccountsResponse: components["schemas"]["Account"][];
    Account: {
      /**
       * Format: date-time
       * @description Date at which the account was created
       * @example 2023-02-06T21:48:11.038Z
       */
      created_at?: string;
      /**
       * Format: uuid
       * @description Account id
       * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
       */
      id?: string;
      /**
       * @description Account name
       * @example account name
       */
      name?: string;
      /**
       * @description Account description
       * @example account description
       */
      description?: string;
    };
    Portfolio: {
      /**
       * Format: float
       * @description Total USD balance of all the account's stakes
       * @example 182981229.16751668
       */
      total_balance_usd?: number;
      /**
       * Format: float
       * @description Total USD of rewards earned from all the account's stakes
       * @example 4526.16751668
       */
      total_rewards_usd?: number;
      /**
       * @description Total number of stakes
       * @example 56
       */
      total_stakes?: number;
      /**
       * @description Total number of stakes actively collecting rewards
       * @example 52
       */
      total_active_stakes?: number;
      /** @description List of protocols staked within the account */
      protocols?: {
          /**
           * @description Token name
           * @example eth
           */
          token?: string;
          /**
           * @description Protocol name
           * @example Ethereum
           */
          name?: string;
          /**
           * @description Total number of stakes for this protocol
           * @example 12
           */
          total_stakes?: number;
          /**
           * @description Total number of stakes actively collecting rewards for this protocol
           * @example 10
           */
          total_active_stakes?: number;
          total_balance?: {
            /**
             * Format: float
             * @description Total USD balance of stakes for this protocol
             * @example 10896.4568
             */
            amount_usd?: number;
            /**
             * Format: float
             * @description Total balance of stakes in the native protocol token for this protocol
             * @example 1896.4563
             */
            amount?: number;
          };
          total_rewards?: {
            /**
             * Format: float
             * @description Total USD of rewards earned for this protocol
             * @example 10896.4568
             */
            amount_usd?: number;
            /**
             * Format: float
             * @description Total rewards earned in the native protocol token for this protocol
             * @example 1896.4568
             */
            amount?: number;
          };
          /**
           * Format: float
           * @description Protocol share of the total balance
           * @example 42.59
           */
          balance_share_percent?: number;
          /**
           * Format: float
           * @description Protocol share of the total rewards earned
           * @example 42.59
           */
          rewards_share_percent?: number;
        }[];
    };
    AccountPayload: {
      /**
       * @description Account name
       * @example name
       */
      name: string;
      /**
       * @description Account description
       * @example description
       */
      description: string;
    };
    CoreStake: {
      /**
       * Format: uuid
       * @description Stake id
       * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
       */
      id: string;
      /** @description List of tags associated with the stake */
      tags: string[];
      /** @description Stake metadata */
      metadata: Record<string, never>;
      /**
       * @description Protocol name
       * @example ethereum
       */
      protocol: string;
      /**
       * Format: date-time
       * @description Creation date
       * @example 2023-02-06T21:48:11.038Z
       */
      created_at: string;
      /**
       * Format: date-time
       * @description Last update date
       * @example 2023-02-06T21:48:11.038Z
       */
      updated_at: string;
    };
    MATICCraftApproveTxPayload: {
      /**
       * @description Wallet address to approve
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      wallet: string;
      /**
       * @description Contract address that needs approval
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      contract: string;
      /**
       * @description Optional amount to approve in WEI. If not specified, an infinite amount will be approved
       * @example 32000000000000000000
       */
      amount_wei?: string;
    };
    MATICUnsignedTx: {
      /**
       * @description Hash of the unsigned transaction
       * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
       */
      unsigned_tx_hash?: string;
      /**
       * @description Unsigned serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      unsigned_tx_serialized?: string;
      /**
       * @description Contract address of the transaction recipient
       * @example 0x0d4a11d5eeaac28ec3f61d100daf4d40471f1852
       */
      to?: string;
      /**
       * @description Hex encoded contract data to be sent with the transaction
       * @example 0xca0bfcce0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002600000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000309696c02ec4dbb99f714e26ff1acdf6b258d36dcbad7b8b549553bc99b94ea639cd247f31683564995afd48568c1b6edd00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000020010000000000000000000000bc86717bad3f8ccf86d2882a6bc351c94580a994000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000060a3869da2ed5cc558f016d59fc5ceb0cac28e58743836aa3cf146221f1ef0b959e3cc5c589e05e171f1473596aadf36411767ad92edaae421ba0291bd7568267b3faabc3ab6ed9ddfc048ea6640370977f16f4f626a0e567a11ba25acdc520bb000000000000000000000000000000000000000000000000000000000000000012dd65914dda46639df6344701de54ac3ebe34a4b230262d3017fcd6c29954452
       */
      contract_call_data?: string;
      /**
       * @description Amount of MATIC to send in wei
       * @example 32000000000000000000
       */
      amount_wei?: string | null;
      /**
       * @description Nonce of the transaction
       * @example 1
       */
      nonce?: number;
      /**
       * @description Gas limit of the transaction in gas units. We provide a default value of two times the estimated gas limit
       * @example 140244
       */
      gas_limit?: number;
      /**
       * @description Max priority fee per gas in wei. This is basically the miner fee. We provide a default value of 2 gwei so transactions are mined faster.
       * @example 2000000000
       */
      max_priority_fee_per_gas_wei?: string;
      /**
       * @description Max fee per gas in wei. This is the maximum amount of gas that you are willing to pay for the transaction.
       * @example 383687469748
       */
      max_fee_per_gas_wei?: string;
      /**
       * @description Chain ID of the network
       * @example 1
       */
      chain_id?: number;
    };
    MATICCraftBuyVoucherTxPayload: {
      /**
       * Format: uuid
       * @description Kiln Account ID to stake into
       * @example b7177fd2-fbb3-479f-aa92-db9fb16e229f
       */
      account_id: string;
      /**
       * @description Wallet address
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      wallet: string;
      /**
       * @description Amount of MATIC to stake in WEI
       * @example 32000000000000000000
       */
      amount_wei: string;
      /**
       * @description Contract address of the validator share proxy contract
       * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
       */
      validator_share_proxy_address: string;
    };
    MATICCraftSellVoucherTxPayload: {
      /**
       * @description Wallet address
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      wallet: string;
      /**
       * @description Amount of MATIC to sell in WEI
       * @example 32000000000000000000
       */
      amount_wei: string;
      /**
       * @description Contract address of the validator share proxy contract
       * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
       */
      validator_share_proxy_address: string;
    };
    MATICCraftUnstakeClaimTokensTxPayload: {
      /**
       * @description Wallet address
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      wallet: string;
      /**
       * @description Contract address of the validator share proxy contract
       * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
       */
      validator_share_proxy_address: string;
    };
    MATICCraftWithdrawRewardsTxPayload: {
      /**
       * @description Wallet address
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      wallet: string;
      /**
       * @description Contract address of the validator share proxy contract
       * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
       */
      validator_share_proxy_address: string;
    };
    MATICCraftRestakeRewardsTxPayload: {
      /**
       * @description Wallet address
       * @example 0xe1f4acc0affB36a805474e3b6ab786738C6900A2
       */
      wallet: string;
      /**
       * @description Contract address of the validator share proxy contract
       * @example 0xD14a87025109013B0a2354a775cB335F926Af65A
       */
      validator_share_proxy_address: string;
    };
    MATICPrepareTxPayload: {
      /**
       * @description Unsigned serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      unsigned_tx_serialized: string;
      /**
       * @description r part of the ECDSA signature in hex
       * @example de28e9efee4c8de422a3c64bfaaee11a32f7cf12bdd3f00dcce41a79fe776c65
       */
      r: string;
      /**
       * @description s part of the ECDSA signature in hex
       * @example 3f233eb69495fa4741ad28ef0ba40612bacaf08331fd76041c371f5a2ecc2ab5
       */
      s: string;
      /**
       * @description v part of the ECDSA signature (0 or 1)
       * @example 0
       */
      v: number;
    };
    MATICTxStatus: {
      /**
       * @description Transaction status
       * @example success
       */
      status?: string;
      /**
       * @description Transaction receipt. Object shape can be found [here](https://github.com/web3/web3.js/blob/c5072a35996eb232e2742e92b612c07ba7af98ab/packages/web3-types/src/eth_types.ts#L299)
       * @example {
       *   "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
       *   "blockNumber": 8608123,
       *   "contractAddress": null,
       *   "cumulativeGasUsed": 8180146,
       *   "effectiveGasPrice": 27391741855,
       *   "from": "0x9ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
       *   "gasUsed": 70098,
       *   "logs": [
       *     {
       *       "address": "0xff50ed3d0ec03aC01D4C79aAd74928BFF48a7b2b",
       *       "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
       *       "blockNumber": 8608123,
       *       "data": "0x00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000001800000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb550000000000000000000000000000000000000000000000000000000000000008004059730700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000609395a07d5e7eb073725049ecba8144d850b7a1a58f603fd1fc12049d32c98db47e3d81608074bca20ccdcc94f7f4767d0d6b852edf4f6231532f33242e64d0617ac93465bc4cdabe9cebf0abe6d169830fcf375b28c0641487e5f86df2875a970000000000000000000000000000000000000000000000000000000000000008ecce030000000000000000000000000000000000000000000000000000000000",
       *       "logIndex": 150,
       *       "removed": false,
       *       "topics": [
       *         "0x649bbc62d0e31342afea4e5cd82d4049e7e1ee912fc0889aa790803be39038c5"
       *       ],
       *       "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
       *       "transactionIndex": 33,
       *       "id": "log_4115d183"
       *     },
       *     {
       *       "address": "0x5FaDfdb7eFffd3B4AA03f0F29d9200Cf5F191F31",
       *       "blockHash": "0x54a0603e3f39e5d358623c8cd86a628a2999c993c1bdd6e547c45632784bd1d7",
       *       "blockNumber": 8608123,
       *       "data": "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000003093b5ae8053213154d099ed7fc99f571a0c8124601f8a59540335c7c35e0b40aad7b033f84af365185c04812acab257460000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000200100000000000000000000009ce658155a6f05fe4aef83b7fa8f431d5e8ccb55",
       *       "logIndex": 151,
       *       "removed": false,
       *       "topics": [
       *         "0x737feedde71ce80c08f73125e4350b001be2dfb6a00fb455086c2b0a514cdfac"
       *       ],
       *       "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
       *       "transactionIndex": 33,
       *       "id": "log_b4bb5ff7"
       *     }
       *   ],
       *   "logsBloom": "0x
       *   "status": true,
       *   "to": "0x5fadfdb7efffd3b4aa03f0f29d9200cf5f191f31",
       *   "transactionHash": "0x25f259a770539a4be99f972620b74219d67cd990d245bcc8d8ad5cddeaa37375",
       *   "transactionIndex": 33,
       *   "type": "0x2"
       * }
       */
      receipt?: Record<string, never>;
    };
    MATICSignedTx: {
      /**
       * @description Signed serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      signed_tx_serialized?: string;
    };
    MATICBroadcastTxPayload: {
      /**
       * @description Signed serialized transaction
       * @example 0x20a40259b763d549dfa1c082776a036dd8dabbe8b5e32ee721be017512dc
       */
      tx_serialized: string;
    };
    MATICBroadcastedTx: {
      /**
       * @description Hash of the transaction
       * @example 0x43244f90814b31dec250de24df5bb023a338790c1d5a39244cf1064cf6d98c94
       */
      tx_hash?: string;
    };
    NEARStake: {
      /**
       * @description Kiln internal stake account ID
       * @example validator.testnet_account.testnet
       */
      stake_account?: string;
      /**
       * @description NEAR account ID
       * @example account.testnet
       */
      account?: string;
      /**
       * @description NEAR validator ID
       * @example validator.testnet
       */
      validator?: string;
      /**
       * @description Current balance in Yocto
       * @example 1000000000
       */
      balance?: string;
      /**
       * @description Sum of rewards rewards in Yocto earned by this stake
       * @example 1000000000
       */
      rewards?: string;
      /**
       * Format: date-time
       * @description Timestamp of the block at which the corresponding staking transaction was executed
       * @example 2023-01-14T01:13:59Z
       */
      activated_at?: string;
      /**
       * @description Epoch at which the corresponding staking transaction was executed
       * @example 123
       */
      activated_epoch?: number;
      /**
       * @description Block at which the corresponding staking transaction was executed
       * @example 123
       */
      activated_block?: number;
      /**
       * @description Net annual percentage yield
       * @example 3.407
       */
      net_apy?: number;
      /**
       * Format: date-time
       * @description Last date this data was updated
       * @example 2023-01-14T01:13:59Z
       */
      updated_at?: string;
    };
    NEARRewardByDay: {
      /**
       * Format: date
       * @description Day for this reward entry
       * @example 2023-01-15
       */
      date: string;
      /**
       * @description Accumulated rewards in Yocto during the day
       * @example 1000
       */
      rewards?: string;
      /**
       * @description Active balance in Yocto after rewards computing
       * @example 1000
       */
      active_balance?: string;
      /**
       * @description Net annual percentage yield
       * @example 3.407
       */
      net_apy?: number;
    };
    NEARRewardByEpoch: {
      /**
       * Format: integer
       * @description Epoch for this reward entry
       * @example 120
       */
      epoch: number;
      /**
       * Format: date-time
       * @description Epoch timestamp for this reward entry
       * @example 2023-01-14T01:13:59Z
       */
      epoch_ts?: string;
      /**
       * @description Accumulated rewards in Yocto during the day
       * @example 1000
       */
      rewards?: string;
      /**
       * @description Active balance in Yocto after rewards computing
       * @example 1000
       */
      active_balance?: string;
      /**
       * @description Net annual percentage yield
       * @example 3.407
       */
      net_apy?: number;
    };
    NEARNetworkStats: {
      /**
       * @description Number of active bakers
       * @example 402
       */
      nb_validators?: number;
      /**
       * @description Gross annual percentage yield
       * @example 4.5
       */
      network_gross_apy?: number;
      /**
       * @description Supply percentage of Tezos currently staked
       * @example 12.4
       */
      supply_staked_percent?: number;
      /**
       * Format: date-time
       * @description Last date this data was updated
       * @example 2023-01-14T01:13:59Z
       */
      updated_at?: string | null;
      /**
       * @description NEAR price in USD
       * @example 3.5
       */
      near_price_usd?: number;
    };
    PostNEARStakesPayload: {
      stakes: {
          /**
           * @description Kiln internal stake account ID
           * @example validator.testnet_account.testnet
           */
          stakeAccount?: string;
          /**
           * @description Kiln organization account ID
           * @example account
           */
          account?: string;
          /**
           * @description Balance to delegate in Yocto
           * @example 1000000000
           */
          balance?: string;
        }[];
      /**
       * @description Kiln Account ID
       * @example 92f5bfd4-ea38-4824-84f7-686eddff5539
       */
      account_id: string;
    };
  };
  responses: never;
  parameters: {
    /** @description Comma-separated list of validators addresses */
    ETHValidatorsParam?: string[];
    /** @description Comma-separated list of wallets addresses */
    ETHWalletsParam?: string[];
    /** @description Comma-separated list of proxy-contract addresses */
    ETHProxiesParam?: string[];
    /** @description Comma-separated list of validators' consensus layer indexes */
    ETHValidatorIndexesParam?: number[];
    /** @description Comma-separated list of Kiln accounts identifiers */
    AccountsParam?: string[];
    /** @description Current page to look-up entries. If not specified, pagination is disabled */
    PaginationPageParam?: number;
    /** @description Number of entries to list per page. Only used when `current_page` is specified */
    PaginationPageSizeParam?: number;
    /** @description Comma-separated list of states to filter on (see `state` for complete list) */
    FilterStatesParam?: string[];
    /** @description Get rewards from this date (YYYY-MM-DD) */
    StartDateParam?: string;
    /** @description Get rewards to this date (YYYY-MM-DD) */
    EndDateParam?: string;
    /** @description Get rewards from this block */
    StartBlockParam?: number;
    /** @description Get rewards to this block */
    EndBlockParam?: number;
    /** @description Account id */
    AccountIdParam: string;
    /** @description Organization id */
    OrganizationIdParam: string;
    /** @description Comma-separated list of wallets addresses */
    XTZWalletsParam?: string[];
    /** @description The cycle from which we want to fetch rewards. Must be used with format=cycle */
    XTZStartCycleParam?: number;
    /** @description The cycle until which we want to fetch rewards. Must be used with format=cycle */
    XTZEndCycleParam?: number;
    /** @description The format of the response. Defaults to daily */
    XTZRewardsFormatParam?: string;
    ADAStakeAddressesParam?: string;
    ADAWalletsParam?: string;
    /** @description The format of the response. Defaults to daily */
    ADARewardsFormatParam?: string;
    /** @description Comma-separated list of wallets addresses */
    SOLWalletsParam?: string[];
    /** @description Comma-separated list of stake addresses */
    SOLStakeAccountsParam?: string[];
    /** @description The epoch from which we want to fetch rewards. Must be used with format=epoch */
    SOLStartEpochParam?: number;
    /** @description The epoch until which we want to fetch rewards. Must be used with format=epoch */
    SOLEndEpochParam?: number;
    /** @description The format of the response. Defaults to daily */
    SOLRewardsFormatParam?: string;
    /**
     * @description Comma-separated list of validators addresses, these addresses
     * are matched with the corresponding delegator addresses. To
     * fetch a specific stake, pass your wallet address and the
     * validator address as parameters.
     */
    ATOMValidatorsParam?: string[];
    /**
     * @description Comma-separated list of delegator addresses, these addresses
     * are matched with the corresponding validator addresses. To
     * fetch a specific stake, pass your wallet address and the
     * validator address as parameters.
     */
    ATOMDelegatorsParam?: string[];
    /** @description Comma-separated list of NEAR account ID */
    NEARWalletsParam?: string[];
    /** @description Comma-separated list of Kiln internal stake account ID */
    NEARStakeAccountsParam?: string[];
    /** @description The epoch from which we want to fetch rewards. Must be used with format=epoch */
    NEARStartEpochParam?: number;
    /** @description The epoch until which we want to fetch rewards. Must be used with format=epoch */
    NEAREndEpochParam?: number;
    /** @description The format of the response. Defaults to daily */
    NEARRewardsFormatParam?: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /**
   * Stakes
   * @description Get the status of Ethereum stakes
   */
  getEthStakes: {
    parameters: {
      query?: {
        validators?: components["parameters"]["ETHValidatorsParam"];
        wallets?: components["parameters"]["ETHWalletsParam"];
        proxies?: components["parameters"]["ETHProxiesParam"];
        validator_indexes?: components["parameters"]["ETHValidatorIndexesParam"];
        accounts?: components["parameters"]["AccountsParam"];
        current_page?: components["parameters"]["PaginationPageParam"];
        page_size?: components["parameters"]["PaginationPageSizeParam"];
        filter_states?: components["parameters"]["FilterStatesParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHStake"][];
            pagination?: components["schemas"]["Pagination"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Create stakes
   * @description Link ETH stakes to a Kiln account
   */
  postEthStakes: {
    /** @description Stakes to create */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["PostETHStakesPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["CoreStake"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Rewards
   * @description Get historical rewards by day of Ethereum stakes
   */
  getEthRewards: {
    parameters: {
      query?: {
        validators?: components["parameters"]["ETHValidatorsParam"];
        wallets?: components["parameters"]["ETHWalletsParam"];
        proxies?: components["parameters"]["ETHProxiesParam"];
        validator_indexes?: components["parameters"]["ETHValidatorIndexesParam"];
        accounts?: components["parameters"]["AccountsParam"];
        start_date?: components["parameters"]["StartDateParam"];
        end_date?: components["parameters"]["EndDateParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHReward"][];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Operations
   * @description Get the operations of Ethereum stakes
   */
  getEthOperations: {
    parameters: {
      query?: {
        validators?: components["parameters"]["ETHValidatorsParam"];
        wallets?: components["parameters"]["ETHWalletsParam"];
        proxies?: components["parameters"]["ETHProxiesParam"];
        validator_indexes?: components["parameters"]["ETHValidatorIndexesParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: (components["schemas"]["ETHOperationDeposit"] | components["schemas"]["ETHOperationConsensusWithdrawal"] | components["schemas"]["ETHOperationExecutionReward"])[];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Network Stats
   * @description Get some network statistics on Ethereum staking
   */
  getEthNetworkStats: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHNetworkStats"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Kiln Stats
   * @description Get some Kiln statistics on Ethereum staking
   */
  getEthKilnStats: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHKilnStats"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Validation Keys
   * @description Create Ethereum validation keys on Kiln's infrastructure.
   */
  postEthKeys: {
    /** @description Ethereum keys to generate */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ETHPostKeysPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHPostKeysCliResponse"] | components["schemas"]["ETHPostKeysBatchResponse"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Stake Transaction
   * @description Generates an Ethereum EIP 1559 stake transaction
   */
  postEthStakeTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ETHCraftStakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Prepare Transaction
   * @description Prepare an Ethereum transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
   */
  postEthPrepareTx: {
    /** @description Transaction to prepare */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ETHPrepareTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHSignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Broadcast Transaction
   * @description Broadcasts a signed Ethereum transaction
   */
  postEthBroadcastTx: {
    /** @description Transaction to broadcast */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ETHBroadcastTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHBroadcastedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Transaction Status
   * @description Get the status of an Ethereum transaction
   */
  getEthTxStatus: {
    parameters: {
      query: {
        /** @description Hash of the transaction */
        tx_hash: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHTxStatus"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Excel Reports
   * @description Generates an Excel report sheet for your stakes and rewards
   */
  getEthReports: {
    parameters: {
      query?: {
        validators?: components["parameters"]["ETHValidatorsParam"];
        wallets?: components["parameters"]["ETHWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Exit Messages
   * @description Get encrypted exit message for a validator
   */
  getExitMessage: {
    parameters: {
      query?: {
        validators?: components["parameters"]["ETHValidatorsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ETHExitMessage"][];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Non-existing stake or the stake is not eligible to for exits (it needs to be active on chain) */
      404: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Stakes
   * @description Get the status of Tezos stakes
   */
  getXtzStakes: {
    parameters: {
      query?: {
        wallets?: components["parameters"]["XTZWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["XTZStake"][];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Rewards
   * @description Get historical rewards of Tezos stakes
   */
  getXtzRewards: {
    parameters: {
      query?: {
        wallets?: components["parameters"]["XTZWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
        format?: components["parameters"]["XTZRewardsFormatParam"];
        start_date?: components["parameters"]["StartDateParam"];
        end_date?: components["parameters"]["EndDateParam"];
        start_cycle?: components["parameters"]["XTZStartCycleParam"];
        end_cycle?: components["parameters"]["XTZEndCycleParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: (components["schemas"]["XTZDailyReward"] | components["schemas"]["XTZCycleReward"])[];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Operations
   * @description Get historical operations of Tezos stakes
   */
  getXtzOperations: {
    parameters: {
      query?: {
        wallets?: components["parameters"]["XTZWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: (components["schemas"]["XTZOperationDelegate"] | components["schemas"]["XTZOperationUndelegate"] | components["schemas"]["XTZOperationActivation"] | components["schemas"]["XTZOperationPayment"])[];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Network Stats
   * @description Get some network statistics on Tezos staking
   */
  getXtzNetworkStats: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["XTZNetworkStats"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Excel Reports
   * @description Generates an Excel report sheet for your stakes and rewards
   */
  getXtzReports: {
    parameters: {
      query?: {
        wallets?: components["parameters"]["XTZWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Stake Transaction
   * @description Generates a delegation transaction on Tezos
   */
  postXtzStakeTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["XTZCraftStakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["XTZUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Unstake Transaction
   * @description Generates an undelegate transaction on Tezos
   */
  postXtzUnStakeTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["XTZCraftUnStakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["XTZUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Prepare Transaction
   * @description Prepare a Tezos transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
   */
  postXtzPrepareTx: {
    /** @description Transaction to prepare */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["XTZPrepareTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["XTZSignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Broadcast Transaction
   * @description Broadcasts a signed Tezos transaction
   */
  postXtzBroadcastTx: {
    /** @description Transaction to broadcast */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["XTZBroadcastTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["XTZBroadcastedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Transaction Status
   * @description Get the status of a Tezos transaction
   */
  getXtzTxStatus: {
    parameters: {
      query: {
        /** @description Hash of the transaction */
        tx_hash: string;
        /** @description Block number in which the transaction was included */
        block_number: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["XTZTxStatus"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Stakes
   * @description Get the status of Solana stakes
   */
  getSolStakes: {
    parameters: {
      query?: {
        stake_accounts?: components["parameters"]["SOLStakeAccountsParam"];
        wallets?: components["parameters"]["SOLWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLStake"][];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Create stakes
   * @description Create Solana stakes and linked them to a Kiln account
   */
  postSolStakes: {
    /** @description Stakes to create */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SOLPostStakesPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["CoreStake"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Rewards
   * @description Get historical rewards of Solana stakes
   */
  getSolRewards: {
    parameters: {
      query?: {
        stake_accounts?: components["parameters"]["SOLStakeAccountsParam"];
        wallets?: components["parameters"]["SOLWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
        start_date?: components["parameters"]["StartDateParam"];
        end_date?: components["parameters"]["EndDateParam"];
        format?: components["parameters"]["SOLRewardsFormatParam"];
        start_epoch?: components["parameters"]["SOLStartEpochParam"];
        end_epoch?: components["parameters"]["SOLEndEpochParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: (components["schemas"]["SOLRewardByEpoch"] | components["schemas"]["SOLRewardByDay"])[];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Operations
   * @description Get the operations of Solana stakes
   */
  getSolOperations: {
    parameters: {
      query?: {
        stake_accounts?: components["parameters"]["SOLStakeAccountsParam"];
        wallets?: components["parameters"]["SOLWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: (components["schemas"]["SOLOperationCreateAccountWithSeed"] | components["schemas"]["SOLOperationCreateAccount"] | components["schemas"]["SOLOperationDelegate"] | components["schemas"]["SOLOperationDeactivate"] | components["schemas"]["SOLOperationRedelegate"] | components["schemas"]["SOLOperationSplit"] | components["schemas"]["SOLOperationWithdraw"] | components["schemas"]["SOLOperationMerge"])[];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Network Stats
   * @description Get some network statistics on Solana staking
   */
  getSolNetworkStats: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLNetworkStats"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Reports
   * @description Get reports on Solana staking
   */
  getSolReports: {
    parameters: {
      query?: {
        stake_accounts?: components["parameters"]["SOLStakeAccountsParam"];
        wallets?: components["parameters"]["SOLWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
        format?: components["parameters"]["SOLRewardsFormatParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Stake Transaction
   * @description Craft a stake transaction. This results in a new stake account created with the amount given.
   */
  postSolStakeTx: {
    /** @description Stake transaction to create */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SOLStakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLStakeTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Deactivate Stake Transaction
   * @description Craft a deactivate stake account transaction.
   */
  postSolDeactivateStakeTx: {
    /** @description Stake to deactivate */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SOLDeactivateStakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLStakeTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Withdraw Stake Transaction
   * @description Craft a withdraw stake transaction.
   */
  postSolWithdrawStakeTx: {
    /** @description Stake to withdraw */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SOLWithdrawStakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLStakeTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Merge Stakes Transaction
   * @description Craft a merge stakes transaction.
   */
  postSolMergeStakesTx: {
    /** @description Stakes to merge */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SOLMergeStakesTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLStakeTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Split Stake Transaction
   * @description Craft a solana split stake transaction
   */
  postSolSplitStakeTx: {
    /** @description Stake to split */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SOLSplitStakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLStakeTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Prepare Transaction
   * @description Prepare an unsigned transaction for broadcast by adding signatures to it
   */
  postSolPrepareTx: {
    /** @description Transaction to sign */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SOLPrepareTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLPreparedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Broadcast Transaction
   * @description Broadcast a serialized signed transaction to the blockchain
   */
  postSolBroadcastTx: {
    /** @description Signed transaction to broadcast */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["SOLBroadcastTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLBroadcastTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Transaction Status
   * @description Get the status of a transaction
   */
  getSolTxStatus: {
    parameters: {
      query: {
        /** @description Hash of the transaction */
        tx_hash: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["SOLTxStatus"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Stakes
   * @description Get the status of ATOM stakes. Units are in uATOM (10⁻⁶ ATOM). Only stakes active after [Theta v7 (12/04/2022)](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary) are available.
   */
  getAtomStakes: {
    parameters: {
      query?: {
        validators?: components["parameters"]["ATOMValidatorsParam"];
        delegators?: components["parameters"]["ATOMDelegatorsParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ATOMStake"][];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Create stakes
   * @description Link an ATOM stake to a Kiln account
   */
  postAtomStakes: {
    /** @description Stakes to create */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["PostATOMStakesPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["CoreStake"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Rewards
   * @description Get historical rewards by day of ATOM stakes. Units are in uATOM (10⁻⁶ ATOM). Only daily breakdowns starting 13/04/2022 ([Theta v7](https://github.com/cosmos/gaia/tree/main/docs/roadmap#cosmos-hub-summary)) are available.
   */
  getAtomRewards: {
    parameters: {
      query?: {
        validators?: components["parameters"]["ATOMValidatorsParam"];
        delegators?: components["parameters"]["ATOMDelegatorsParam"];
        accounts?: components["parameters"]["AccountsParam"];
        start_date?: components["parameters"]["StartDateParam"];
        end_date?: components["parameters"]["EndDateParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ATOMReward"][];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Network Stats
   * @description Get some network statistics on Cosmos
   */
  getAtomNetworkStats: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ATOMNetworkStats"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Reports
   * @description Get reports on Cosmos staking
   */
  getAtomReports: {
    parameters: {
      query?: {
        delegators?: components["parameters"]["ATOMDelegatorsParam"];
        validators?: components["parameters"]["ATOMValidatorsParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Stake Transaction
   * @description Generates a delegate transaction on Cosmos
   */
  postAtomStakeTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ATOMCraftStakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ATOMUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Withdraw Rewards Transaction
   * @description Generates a withdraw rewards transaction on Cosmos
   */
  postAtomWithdrawRewardsTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ATOMCraftWithdrawRewardsTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ATOMUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Unstake Transaction
   * @description Generates an undelegate transaction on Cosmos
   */
  postAtomUnstakeTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ATOMCraftUnstakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ATOMUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Prepare Transaction
   * @description Prepare an unsigned transaction for broadcast by adding signatures to it
   */
  postAtomPrepareTx: {
    /** @description Transaction to prepare */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ATOMPrepareTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ATOMSignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Broadcast Transaction
   * @description Broadcast a signed transaction to the Cosmos network
   */
  postAtomBroadcastTx: {
    /** @description Transaction to broadcast */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ATOMBroadcastTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ATOMTxHash"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Transaction Status
   * @description Get the status of a transaction
   */
  getAtomTxStatus: {
    parameters: {
      query: {
        /** @description Hash of the transaction */
        tx_hash: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ATOMTxStatus"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Accounts
   * @description Retrieve accounts in your organization
   */
  getAccounts: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["AccountsResponse"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Accounts
   * @description Create a new account in your organization
   */
  postAccount: {
    /** @description Account to create */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["AccountPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json": {
            data?: components["schemas"]["Account"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Account
   * @description Retrieve an account in your organization
   */
  getAccount: {
    parameters: {
      path: {
        id: components["parameters"]["AccountIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Account"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Account
   * @description Update an account in your organization
   */
  putAccount: {
    parameters: {
      path: {
        id: components["parameters"]["AccountIdParam"];
      };
    };
    /** @description Account to update */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["AccountPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Account"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Account
   * @description Delete an account in your organization
   */
  deleteAccount: {
    parameters: {
      path: {
        id: components["parameters"]["AccountIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Account"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Account Portfolio
   * @description Retrieve an account asset portfolio. USD balances are calculated based on recent asset prices. We use CoinGecko API to retrieve asset prices.
   */
  getAccountPortfolio: {
    parameters: {
      path: {
        id: components["parameters"]["AccountIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Portfolio"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Organization Portfolio
   * @description Retrieve an organization asset portfolio. USD balances are calculated based on recent asset prices. We use CoinGecko API to retrieve asset prices.
   */
  getOrganizationPortfolio: {
    parameters: {
      path: {
        id: components["parameters"]["OrganizationIdParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json": {
            data?: components["schemas"]["Portfolio"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Reports
   * @description Get reports on Cardano staking
   */
  getAdaReports: {
    parameters: {
      query?: {
        stake_addresses?: components["parameters"]["ADAStakeAddressesParam"];
        wallets?: components["parameters"]["ADAWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
        format?: components["parameters"]["ADARewardsFormatParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Stake Transaction
   * @description Generates a delegate transaction on Cardano
   */
  postAdaStakeTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ADACraftStakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ADAUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Withdraw Rewards Transaction
   * @description Generates a withdraw rewards transaction on Cardano
   */
  postAdaWithdrawRewardsTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ADACraftWithdrawRewardsTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ADAUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Unstake Transaction
   * @description Generates an undelegate transaction on Cardano
   */
  postAdaUnstakeTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ADACraftUnstakeTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ADAUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Prepare Transaction
   * @description Prepare an unsigned transaction for broadcast by adding signatures to it
   */
  postAdaPrepareTx: {
    /** @description Transaction to prepare */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ADAPrepareTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ADASignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Broadcast Transaction
   * @description Broadcast a signed transaction to the Cardano network
   */
  postAdaBroadcastTx: {
    /** @description Transaction to broadcast */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["ADABroadcastTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ADATxHash"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Transaction Status
   * @description Get the status of a transaction
   */
  getAdaTxStatus: {
    parameters: {
      query: {
        /** @description Hash of the transaction */
        tx_hash: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["ADATxStatus"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Approve Transaction
   * @description Generates an approve transaction to allow a smart contract to spend MATIC tokens on behalf of the user
   */
  postMaticApproveTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MATICCraftApproveTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["MATICUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Buy Voucher Transaction
   * @description Generates a buy voucher transaction to buy shares from a validator
   */
  postMaticBuyVoucherTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MATICCraftBuyVoucherTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["MATICUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Sell Voucher Transaction
   * @description Generates a sell voucher transaction to sell shares from a validator. Your token then enter a 3/4 days (80 checkpoints) unbonding period.
   */
  postMaticSellVoucherTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MATICCraftSellVoucherTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["MATICUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Unstake Claim Tokens Transaction
   * @description Generates an unstakeClaimTokens transaction to withdraw unbonded tokens back to your wallet
   */
  postMaticUnstakeClaimTokensTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MATICCraftUnstakeClaimTokensTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["MATICUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Withdraw Rewards Transaction
   * @description Generates a withdraw rewards transaction to withdraw available rewards to your wallet
   */
  postMaticWithdrawRewardsTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MATICCraftWithdrawRewardsTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["MATICUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Restake Rewards Transaction
   * @description Generates a restake rewards transaction to restake available rewards to the given validator
   */
  postMaticRestakeRewardsTx: {
    /** @description Transaction to craft */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MATICCraftRestakeRewardsTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["MATICUnsignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Prepare Transaction
   * @description Prepare a transaction for broadcasting. It takes a serialized transaction and its signatures and returns a serialized signed transaction that can be broadcasted.
   */
  postMaticPrepareTx: {
    /** @description Transaction to prepare */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MATICPrepareTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["MATICSignedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Broadcast Transaction
   * @description Broadcasts a signed transaction to the Ethereum network
   */
  postMaticBroadcastTx: {
    /** @description Transaction to broadcast */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["MATICBroadcastTxPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["MATICBroadcastedTx"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Transaction Status
   * @description Get the status of a transaction on the Ethereum network
   */
  getMaticTxStatus: {
    parameters: {
      query: {
        /** @description Hash of the transaction */
        tx_hash: string;
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["MATICTxStatus"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Stakes
   * @description Get the status of NEAR stakes
   */
  getNearStakes: {
    parameters: {
      query?: {
        stake_accounts?: components["parameters"]["NEARStakeAccountsParam"];
        wallets?: components["parameters"]["NEARWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["NEARStake"][];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Create stakes
   * @description Create NEAR stakes and linked them to a Kiln account
   */
  postNEARStakes: {
    /** @description Stakes to create */
    requestBody: {
      content: {
        "application/json; charset=utf-8": components["schemas"]["PostNEARStakesPayload"];
      };
    };
    responses: {
      /** @description Successful operation */
      201: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["CoreStake"];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Rewards
   * @description Get historical rewards of NEAR stakes
   */
  getNearRewards: {
    parameters: {
      query?: {
        stake_accounts?: components["parameters"]["NEARStakeAccountsParam"];
        wallets?: components["parameters"]["NEARWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
        format?: components["parameters"]["NEARRewardsFormatParam"];
        start_date?: components["parameters"]["StartDateParam"];
        end_date?: components["parameters"]["EndDateParam"];
        start_epoch?: components["parameters"]["NEARStartEpochParam"];
        end_epoch?: components["parameters"]["NEAREndEpochParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: (components["schemas"]["NEARRewardByDay"] | components["schemas"]["NEARRewardByEpoch"])[];
          };
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Reports
   * @description Get reports on NEAR staking
   */
  getNEARReports: {
    parameters: {
      query?: {
        stake_accounts?: components["parameters"]["NEARStakeAccountsParam"];
        wallets?: components["parameters"]["NEARWalletsParam"];
        accounts?: components["parameters"]["AccountsParam"];
        format?: components["parameters"]["NEARRewardsFormatParam"];
      };
    };
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/octet-stream": string;
        };
      };
      /** @description Invalid parameters */
      400: never;
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
  /**
   * Network Stats
   * @description Get stats on NEAR network
   */
  getNEARNetworkStats: {
    responses: {
      /** @description Successful operation */
      200: {
        content: {
          "application/json; charset=utf-8": {
            data?: components["schemas"]["NEARNetworkStats"];
          };
        };
      };
      /** @description Unauthorized */
      401: never;
      /** @description Internal server error */
      500: never;
    };
  };
}
